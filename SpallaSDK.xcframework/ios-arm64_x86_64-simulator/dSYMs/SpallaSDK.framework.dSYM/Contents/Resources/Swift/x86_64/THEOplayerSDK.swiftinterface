// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name THEOplayerSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import CoreData
import CoreGraphics
import CoreMedia
import Foundation
import MediaPlayer
import Network
import Swift
import SystemConfiguration
@_exported import THEOplayerSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct CacheEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.CacheEvent>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FullscreenViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class ChromecastMetadataDescription : THEOplayerSDK.MetadataDescription {
  public var images: [THEOplayerSDK.ChromecastMetadataImage]?
  public var releaseDate: Swift.String?
  public var subtitle: Swift.String?
  public var releaseYear: Swift.Int?
  public var type: THEOplayerSDK.ChromecastMetadataType?
  public init(images: [THEOplayerSDK.ChromecastMetadataImage]? = nil, releaseDate: Swift.String? = nil, releaseYear: Swift.Int? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil, type: THEOplayerSDK.ChromecastMetadataType? = .GENERIC, metadataKeys: [Swift.String : Any]? = nil)
  required convenience public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public class ChromecastMetadataImage : ObjectiveC.NSObject, Swift.Codable {
  public var src: Swift.String
  public var width: Swift.Int
  public var height: Swift.Int
  public init(src: Swift.String, width: Swift.Int = 0, height: Swift.Int = 0)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum ChromecastMetadataType : Swift.Int {
  case NONE
  case AUDIO
  case TV_SHOW
  case GENERIC
  case MOVIE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.ChromecastMetadataType : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class EzdrmDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public init(keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MultiplatformDRMConfiguration : ObjectiveC.NSObject, THEOplayerSDK.DRMConfiguration {
  final public let integrationKind: THEOplayerSDK.DRMIntegration
  final public let integrationParameters: Swift.Dictionary<Swift.String, Any>?
  final public let customIntegrationId: Swift.String?
  final public let keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection
  convenience public init(keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  public init(customIntegrationId: Swift.String, integrationParameters: Swift.Dictionary<Swift.String, Any> = [:], keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "integrationKind")
  public var integration: THEOplayerSDK.DRMIntegration? {
    get
  }
  @available(*, deprecated, message: "This property will be removed in future versions. Please use one of the headers on keySystemConfigurations instead")
  public var headers: [[Swift.String : Swift.String]]? {
    get
  }
  @objc deinit
}
extension THEOplayerSDK.MultiplatformDRMConfiguration {
  @available(*, deprecated, renamed: "keySystemConfigurations.fairplay", message: "This property will be removed in the next major release. Please use the keySystemConfigurations property instead.")
  public var fairplay: THEOplayerSDK.KeySystemConfiguration {
    get
  }
}
#if compiler(>=5.3) && $AsyncAwait
@_spi(Core) public func retryWithExponentialBackoff<T>(callback: @escaping () async throws -> T, maxRetries: Swift.Double = 3, baseDelayInMs: Swift.Double = 1000, maxDelayInMs: Swift.Double = Double.infinity) async throws -> T
#endif
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class ComcastDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public var releasePid: Swift.String
  public var token: Swift.String
  public var accountId: Swift.String
  public init(releasePid: Swift.String, token: Swift.String, accountId: Swift.String, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol CueEventProtocol : THEOplayerSDK.EventProtocol {
  var cue: any THEOplayerSDK.TextTrackCue { get }
}
@objc @_hasMissingDesignatedInitializers public class CueEnterEvent : ObjectiveC.NSObject, THEOplayerSDK.CueEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let cue: any THEOplayerSDK.TextTrackCue
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CueExitEvent : ObjectiveC.NSObject, THEOplayerSDK.CueEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let cue: any THEOplayerSDK.TextTrackCue
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CueUpdateEvent : ObjectiveC.NSObject, THEOplayerSDK.CueEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let cue: any THEOplayerSDK.TextTrackCue
  @objc deinit
}
@objc public protocol ContentProtectionIntegration {
  @objc optional func onCertificateRequest(request: THEOplayerSDK.CertificateRequest, callback: any THEOplayerSDK.CertificateRequestCallback)
  @objc optional func onCertificateResponse(response: THEOplayerSDK.CertificateResponse, callback: any THEOplayerSDK.CertificateResponseCallback)
  @objc optional func onLicenseRequest(request: THEOplayerSDK.LicenseRequest, callback: any THEOplayerSDK.LicenseRequestCallback)
  @objc optional func onLicenseResponse(response: THEOplayerSDK.LicenseResponse, callback: any THEOplayerSDK.LicenseResponseCallback)
  @objc optional func onExtractFairplayContentId(skdUrl: Swift.String, callback: any THEOplayerSDK.ExtractContentIdCallback)
}
@objc public protocol CertificateRequestCallback : THEOplayerSDK.CertificateResponseCallback {
  @objc func request(request: THEOplayerSDK.CertificateRequest)
}
@objc public protocol CertificateResponseCallback {
  @objc func respond(certificate: Foundation.Data)
  @objc func error(error: any Swift.Error)
}
@objc public protocol LicenseRequestCallback : THEOplayerSDK.LicenseResponseCallback {
  @objc func request(request: THEOplayerSDK.LicenseRequest)
}
@objc public protocol LicenseResponseCallback {
  @objc func respond(license: Foundation.Data)
  @objc func error(error: any Swift.Error)
}
@objc public protocol ExtractContentIdCallback {
  @objc func respond(contentID: Foundation.Data?)
  @objc func error(error: any Swift.Error)
}
public enum ErrorCategory : Swift.Int32, Swift.Codable, Swift.CaseIterable {
  case CONFIGURATION
  case LICENSE
  case SOURCE
  case MANIFEST
  case MEDIA
  case NETWORK
  case CONTENT_PROTECTION
  case SUBTITLE
  case VR
  case ADS
  case FULLSCREEN
  case CACHE
  case THEOLIVE
  case MILLICAST
  public init?(rawValue: Swift.Int32)
  public typealias AllCases = [THEOplayerSDK.ErrorCategory]
  public typealias RawValue = Swift.Int32
  public static var allCases: [THEOplayerSDK.ErrorCategory] {
    get
  }
  public var rawValue: Swift.Int32 {
    get
  }
}
@_spi(Core) public class DelegatingABRController<Delegate> : THEOplayerSDK.BaseABRConfiguration where Delegate : THEOplayerSDK.ABRDelegate {
  @_spi(Core) public var delegate: Delegate?
  @_spi(Core) override public var strategy: THEOplayerSDK.ABRStrategyConfiguration {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var targetBuffer: Swift.Double {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var preferredPeakBitRate: Swift.Double {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var preferredMaximumResolution: CoreFoundation.CGSize {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public init(delegate: Delegate?)
  @_spi(Core) override public func loadProperties(from other: any THEOplayerSDK.ABRConfiguration)
  @_spi(Core) public func applyAllProperties(withSourceOverride: THEOplayerSDK.SourceAbrConfiguration? = nil)
  @_spi(Core) @objc deinit
}
@_spi(Core) public protocol ABRDelegate {
  @_spi(Core) func setStrategy(_ newValue: THEOplayerSDK.ABRStrategyConfiguration)
  @_spi(Core) func setTargetBuffer(_ newValue: Swift.Double)
  @_spi(Core) func setPreferredPeakBitRate(_ newValue: Swift.Double)
  @_spi(Core) func setPreferredMaximumResolution(_ newValue: CoreFoundation.CGSize)
}
public class CastError {
  final public let errorCode: THEOplayerSDK.ErrorCode
  final public let description: Swift.String?
  public init(errorCode: THEOplayerSDK.ErrorCode, description: Swift.String?)
  @objc deinit
}
public enum ErrorCode : Swift.Int {
  case cancel
  case timeout
  case receiverUnavailable
  case extensionMissing
  case sessionError
  case channelError
  case invalidParameter
  case loadMediaFailed
  case extensionNotCompatible
  case apiNotInitialized
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.ErrorCode {
  public var _rawValue: Swift.String {
    get
    set
  }
}
public protocol EventDispatcherProtocol {
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol TextTrackStyle {
  var backgroundColor: [THEOplayerSDK.TextTrackStyleRuleColor]? { get set }
  var fontColor: [THEOplayerSDK.TextTrackStyleRuleColor]? { get set }
  var fontSize: [THEOplayerSDK.TextTrackStyleRuleNumber]? { get set }
  var fontFamily: [THEOplayerSDK.TextTrackStyleRuleString]? { get set }
  var edgeStyle: [THEOplayerSDK.TextTrackStyleRuleString]? { get set }
  var marginTop: [THEOplayerSDK.TextTrackStyleRuleNumber]? { get set }
  var marginLeft: [THEOplayerSDK.TextTrackStyleRuleNumber]? { get set }
}
public protocol TextTrackStyleRule {
}
@objc public class TextTrackStyleRuleColor : ObjectiveC.NSObject, THEOplayerSDK.TextTrackStyleRule {
  public init(_ color: UIKit.UIColor, textSelector: Swift.String? = nil)
  @objc deinit
}
@objc public class TextTrackStyleRuleString : ObjectiveC.NSObject, THEOplayerSDK.TextTrackStyleRule {
  public init(_ string: Swift.String, textSelector: Swift.String? = nil)
  @objc deinit
}
@objc public class TextTrackStyleRuleNumber : ObjectiveC.NSObject, THEOplayerSDK.TextTrackStyleRule {
  public init(_ number: Swift.Int, textSelector: Swift.String? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TextTrackStyleEdgeStyle : ObjectiveC.NSObject {
  public static let none: Swift.String
  public static let raised: Swift.String
  public static let depressed: Swift.String
  public static let uniform: Swift.String
  public static let dropShadow: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public enum ReadyState : Swift.Int {
  case HAVE_NOTHING
  case HAVE_METADATA
  case HAVE_CURRENT_DATA
  case HAVE_FUTURE_DATA
  case HAVE_ENOUGH_DATA
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MediaTrackEventTypes {
  public static let ACTIVE_QUALITY_CHANGED: THEOplayerSDK.EventType<THEOplayerSDK.ActiveQualityChangedEvent>
}
@_spi(Core) public class ChainObserver<T> : ObjectiveC.NSObject where T : Swift.Equatable {
  @_spi(Core) public struct ObservationNode {
    @_spi(Core) public init(object: ObjectiveC.NSObject? = nil, keyPath: Swift.String)
  }
  @_spi(Core) public init(observedNode: THEOplayerSDK.ChainObserver<T>.ObservationNode, initValue: T, targetNode: THEOplayerSDK.ChainObserver<T>.ObservationNode)
  @_spi(Core) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_spi(Core) @objc deinit
}
@_spi(Core) @_hasMissingDesignatedInitializers public class ContentProtectionIntegrationInitProvider {
  @_spi(Core) public static let shared: THEOplayerSDK.ContentProtectionIntegrationInitProvider
  @_spi(Core) public func registerContentProtectionIntegration(integrationId: Swift.String, keySystem: THEOplayerSDK.KeySystemId, integrationFactory: any THEOplayerSDK.ContentProtectionIntegrationFactory)
  @_spi(Core) @objc deinit
}
@objc public class KeySystemConfiguration : ObjectiveC.NSObject, Swift.Codable {
  public var licenseAcquisitionURL: Foundation.URL?
  public var certificateURL: Foundation.URL?
  public var licenseType: THEOplayerSDK.LicenseType?
  public var headers: [Swift.String : Swift.String]?
  public init(licenseAcquisitionURL: Swift.String? = nil, certificateURL: Swift.String? = nil, licenseType: THEOplayerSDK.LicenseType? = nil, headers: [Swift.String : Swift.String]? = nil)
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol DRMConfiguration : Swift.Decodable, Swift.Encodable {
  var headers: [[Swift.String : Swift.String]]? { get }
  var integrationParameters: Swift.Dictionary<Swift.String, Any>? { get }
  var integration: THEOplayerSDK.DRMIntegration? { get }
  var customIntegrationId: Swift.String? { get }
}
public protocol FairPlayDRMConfigurationProtocol : THEOplayerSDK.DRMConfiguration {
  var fairplay: THEOplayerSDK.KeySystemConfiguration { get }
}
public protocol WidevineDRMConfigurationProtocol : THEOplayerSDK.DRMConfiguration {
  var widevine: THEOplayerSDK.KeySystemConfiguration { get }
}
public enum LicenseType : Swift.Int {
  case none
  case temporary
  case persistent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.LicenseType : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum DRMIntegration : Swift.Int {
  case none
  case azure
  case uplynk
  case vimond
  case ezdrm
  case axinom
  case keyos
  case verimatrix
  case comcast
  case irdeto
  case drmtoday
  case xstream
  case vudrm
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.DRMIntegration : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol TextTrackList : THEOplayerSDK.EventDispatcherProtocol {
  var count: Swift.Int { get }
  func get(_ index: Swift.Int) -> any THEOplayerSDK.TextTrack
  @available(*, deprecated, message: "Using subscript is deprecated and will be removed with the next major version. Please use `get(_ index: Int)` instead.")
  subscript(index: Swift.Int) -> any THEOplayerSDK.TextTrack { get set }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol Omid {
  func addFriendlyObstruction(friendlyObstruction: THEOplayerSDK.OmidFriendlyObstruction)
  func removeFriendlyObstructions()
}
@objc public class OmidFriendlyObstruction : ObjectiveC.NSObject {
  public var view: UIKit.UIView {
    get
  }
  public var purpose: THEOplayerSDK.OmidFriendlyObstructionPurpose {
    get
  }
  public var detailedReason: Swift.String? {
    get
  }
  public init(view: UIKit.UIView, purpose: THEOplayerSDK.OmidFriendlyObstructionPurpose, detailedReason: Swift.String?)
  @objc deinit
}
public protocol EventProtocol {
  var type: Swift.String { get }
  var date: Foundation.Date { get }
}
public enum IntegrationError : Swift.Error {
  case noSetup
  public static func == (a: THEOplayerSDK.IntegrationError, b: THEOplayerSDK.IntegrationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum IntegrationKind : Swift.Int {
  case CAST
  case GOOGLE_DAI
  case GOOGLE_IMA
  case THEO_ADS
  case ANALYTICS
  case MILLICAST
  case THEOlive
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol Integration {
  @objc var kind: THEOplayerSDK.IntegrationKind { get }
  @objc var id: Foundation.UUID { get }
}
extension THEOplayerSDK.THEOplayer {
  public func addGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  public func removeGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  public var gestureRecognizers: [UIKit.UIGestureRecognizer]? {
    get
  }
}
public struct GenericSwiftError : THEOplayerSDK.THEOBaseError {
  public let name: Swift.String
  public let error: any Swift.Error
  public let stack: [Swift.String]?
  @_spi(Core) public init(error: any Swift.Error)
  public var message: Swift.String {
    get
  }
}
extension Swift.Optional where Wrapped == Swift.Int {
  @_spi(Core) public func toDouble() -> Swift.Double?
}
public enum Preload : Swift.Int {
  case none
  case auto
  case metadata
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.Preload {
  public var _rawValue: Swift.String {
    get
    set
  }
}
public enum KeySystemId : Swift.Int {
  case WIDEVINE
  case FAIRPLAY
  case PLAYREADY
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.KeySystemId : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(Core) public class BaseABRConfiguration : THEOplayerSDK.ABRConfiguration {
  @_spi(Core) public var strategy: THEOplayerSDK.ABRStrategyConfiguration
  @_spi(Core) public var targetBuffer: Swift.Double
  @_spi(Core) public var preferredPeakBitRate: Swift.Double
  @_spi(Core) public var preferredMaximumResolution: CoreFoundation.CGSize
  @_spi(Core) public init()
  @_spi(Core) public func loadProperties(from other: any THEOplayerSDK.ABRConfiguration)
  @_spi(Core) @objc deinit
}
extension THEOplayerSDK.THEOplayer {
  public var fullscreen: any THEOplayerSDK.Fullscreen {
    get
  }
}
public protocol Fullscreen : THEOplayerSDK.EventDispatcherProtocol {
  var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask { get }
  var viewController: THEOplayerSDK.FullscreenViewController? { get }
  var viewControllerClass: THEOplayerSDK.FullscreenViewController.Type? { get set }
  var presentationDelegate: (any THEOplayerSDK.FullscreenPresentationDelegate)? { get set }
  func setSupportedInterfaceOrientations(supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask)
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public enum AspectRatio : Swift.Int {
  case fit
  case fill
  case aspectFill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol FullscreenPresentationDelegate : AnyObject {
  func present(viewController: THEOplayerSDK.FullscreenViewController, completion: @escaping () -> Swift.Void)
  func dismiss(viewController: THEOplayerSDK.FullscreenViewController, completion: @escaping () -> Swift.Void)
}
public struct VideoTrackListEventTypes {
  public static var ADD_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.AddTrackEvent>
  public static var REMOVE_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.RemoveTrackEvent>
  public static var CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.TrackChangeEvent>
}
extension Swift.Encodable {
  public func toJSONEncodableDictionary() -> [Swift.String : Any]
}
@_spi(Core) @_inheritsConvenienceInitializers open class AudioTrackImpl : THEOplayerSDK.MediaTrackImpl, THEOplayerSDK.AudioTrack {
  @_spi(Core) override public init(kind: Swift.String, label: Swift.String, unlocalizedLabel: Swift.String = super, language: Swift.String, id: Swift.String? = nil)
  @_spi(Core) @objc deinit
}
@_spi(Core) @_inheritsConvenienceInitializers public class VideoTrackImpl : THEOplayerSDK.MediaTrackImpl, THEOplayerSDK.VideoTrack {
  @_spi(Core) override public init(kind: Swift.String, label: Swift.String, unlocalizedLabel: Swift.String = super, language: Swift.String, id: Swift.String? = nil)
  @_spi(Core) @objc deinit
}
@objc public class ActiveQualityChangedEvent : ObjectiveC.NSObject, THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  @_spi(Core) public init(date: Foundation.Date = Date())
  @objc deinit
}
public protocol CachingTaskLicense {
  func renew()
  func renew(_ drmConfiguation: any THEOplayerSDK.DRMConfiguration)
}
public protocol TextTrack : THEOplayerSDK.Track {
  var inBandMetadataTrackDispatchType: Swift.String { get }
  var mode: THEOplayerSDK.TextTrackMode { get set }
  var cues: [any THEOplayerSDK.TextTrackCue] { get }
  var src: Swift.String { get }
  var activeCues: [any THEOplayerSDK.TextTrackCue] { get }
  var type: Swift.String { get }
  var forced: Swift.Bool { get }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class UplynkDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public init(keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol AdDescription {
  var integration: THEOplayerSDK.AdIntegration? { get }
}
public enum AdIntegration : Swift.Int {
  case none
  case theoAds
  case google_ima
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.AdIntegration : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SourceDescription : ObjectiveC.NSObject, Swift.Codable {
  public var sources: [THEOplayerSDK.TypedSource] {
    get
    set
  }
  public var textTracks: [THEOplayerSDK.TextTrackDescription]? {
    get
    set
  }
  public var ads: [any THEOplayerSDK.AdDescription]? {
    get
    set
  }
  public var poster: Foundation.URL? {
    get
    set
  }
  public var metadata: THEOplayerSDK.MetadataDescription? {
    get
    set
  }
  public var abr: THEOplayerSDK.SourceAbrConfiguration? {
    get
    set
  }
  public init(sources: [THEOplayerSDK.TypedSource], textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, ads: [any THEOplayerSDK.AdDescription]? = nil, poster: Swift.String? = nil, metadata: THEOplayerSDK.MetadataDescription? = nil, abr: THEOplayerSDK.SourceAbrConfiguration? = nil)
  public init(source: THEOplayerSDK.TypedSource, textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, ads: [any THEOplayerSDK.AdDescription]? = nil, poster: Swift.String? = nil, metadata: THEOplayerSDK.MetadataDescription? = nil, abr: THEOplayerSDK.SourceAbrConfiguration? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public func copy(sources: [THEOplayerSDK.TypedSource], abr: THEOplayerSDK.SourceAbrConfiguration? = nil, ads: [any THEOplayerSDK.AdDescription]? = nil) -> THEOplayerSDK.SourceDescription
  @objc deinit
}
public enum SourceType : Swift.String {
  case HLS
  case DASH
  case HESP
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class TrackUpdateEvent : ObjectiveC.NSObject, THEOplayerSDK.TrackEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let track: any THEOplayerSDK.Track
  public init(date: Foundation.Date, track: any THEOplayerSDK.Track)
  @objc deinit
}
public struct THEOAdDescription : THEOplayerSDK.AdDescription {
  public let integration: THEOplayerSDK.AdIntegration?
  public let networkCode: Swift.String?
  public let customAssetKey: Swift.String?
  public let backdropDoubleBox: Foundation.URL?
  public let backdropLShape: Foundation.URL?
  public let overrideLayout: THEOplayerSDK.THEOAdDescription.LayoutOverride?
  public let overrideAdSrc: Foundation.URL?
  public let adTagParameters: Swift.Dictionary<Swift.String, Swift.String>?
  public let streamActivityMonitorId: Swift.String?
  public let useId3: Swift.Bool
  public var sseEndpoint: Swift.String?
  public let retrievePodIdURI: Swift.String?
  public let initializationDelay: Foundation.TimeInterval?
  public init(networkCode: Swift.String? = nil, customAssetKey: Swift.String? = nil, backdropDoubleBox: Foundation.URL? = nil, backdropLShape: Foundation.URL? = nil, overrideLayout: THEOplayerSDK.THEOAdDescription.LayoutOverride? = nil, overrideAdSrc: Foundation.URL? = nil, adTagParameters: Swift.Dictionary<Swift.String, Swift.String>? = nil, useId3: Swift.Bool? = nil, streamActivityMonitorId: Swift.String? = nil, sseEndpoint: Swift.String? = nil, retrievePodIdURI: Swift.String? = nil, initializationDelay: Foundation.TimeInterval? = nil)
  public enum LayoutOverride {
    case single
    case lShape
    case double
    public static func == (a: THEOplayerSDK.THEOAdDescription.LayoutOverride, b: THEOplayerSDK.THEOAdDescription.LayoutOverride) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_hasMissingDesignatedInitializers public class Response : ObjectiveC.NSObject, Swift.Codable {
  public var request: THEOplayerSDK.Request
  public var url: Swift.String
  public var status: Swift.Int
  public var statusText: Swift.String
  public var headers: [Swift.String : Swift.String]
  public var body: Foundation.Data
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CertificateResponse : THEOplayerSDK.Response {
  public init(certificateRequest: THEOplayerSDK.CertificateRequest, url: Swift.String, status: Swift.Int, statusText: Swift.String, headers: [Swift.String : Swift.String], body: Foundation.Data)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LicenseResponse : THEOplayerSDK.Response {
  public init(licenseRequest: THEOplayerSDK.LicenseRequest, url: Swift.String, status: Swift.Int, statusText: Swift.String, headers: [Swift.String : Swift.String], body: Foundation.Data)
  @objc deinit
}
@_spi(WebVTT) @_hasMissingDesignatedInitializers public class WebVTTParser {
  @_spi(WebVTT) public static func getVttContent(urlString: Swift.String, completion: @escaping (_ content: Swift.String, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask?
  @_spi(WebVTT) @objc deinit
}
@_spi(Core) @_inheritsConvenienceInitializers open class RoutableContentPlayer : THEOplayerSDK.ForwardingContentPlayer {
  @_spi(Core) override public init(player: any THEOplayerSDK.ContentPlayer, forwardEvents: Swift.Bool = true)
  @_spi(Core) override open var audioTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl> & THEOplayerSDK.AudioTrackList {
    @_spi(Core) get
  }
  @_spi(Core) override open var videoTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl> & THEOplayerSDK.VideoTrackList {
    @_spi(Core) get
  }
  @_spi(Core) override open var textTracks: any THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList {
    @_spi(Core) get
  }
  @_spi(Core) public func swapPlayer(newPlayer: any THEOplayerSDK.ContentPlayer, switchTracks: Swift.Bool = true)
  @_spi(Core) open func transformForwardedEvent(event: any THEOplayerSDK.EventProtocol) -> (any THEOplayerSDK.EventProtocol)?
  @_spi(Core) @objc deinit
}
public protocol Ads : THEOplayerSDK.EventDispatcherProtocol {
  var playing: Swift.Bool { get }
  var currentAds: [any THEOplayerSDK.Ad] { get }
  var currentAdBreak: (any THEOplayerSDK.AdBreak)? { get }
  var scheduledAdBreaks: [any THEOplayerSDK.AdBreak] { get }
  var scheduledAds: [any THEOplayerSDK.Ad] { get }
  func schedule(adDescription: any THEOplayerSDK.AdDescription)
  func skip()
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  var omid: any THEOplayerSDK.Omid { get }
  func registerServerSideIntegration(integrationId: Swift.String, integrationFactory: (_ controller: any THEOplayerSDK.ServerSideAdIntegrationController) -> any THEOplayerSDK.ServerSideAdIntegrationHandler)
}
@_spi(Core) @_inheritsConvenienceInitializers open class AudioTrackListImpl : THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl>, THEOplayerSDK.AudioTrackList {
  @_spi(Core) override public init()
  @_spi(Core) @objc deinit
}
public protocol AdEventProtocol : THEOplayerSDK.EventProtocol {
  var ad: (any THEOplayerSDK.Ad)? { get }
}
public protocol AdErrorEventProtocol : THEOplayerSDK.EventProtocol {
  var ad: (any THEOplayerSDK.Ad)? { get }
  var error: Swift.String? { get }
}
public protocol AdBreakEventProtocol : THEOplayerSDK.EventProtocol {
  var ad: (any THEOplayerSDK.AdBreak)? { get }
}
@objc @_hasMissingDesignatedInitializers public class AdEvent : ObjectiveC.NSObject, THEOplayerSDK.AdEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let ad: (any THEOplayerSDK.Ad)?
  final public let currentTime: Swift.Double?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdBeginEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?, currentTime: Swift.Double? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdEndEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?, currentTime: Swift.Double? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdFirstQuartileEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?, currentTime: Swift.Double? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdMidpointEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?, currentTime: Swift.Double? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdThirdQuartileEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?, currentTime: Swift.Double? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdLoadedEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdImpressionEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdSkipEvent : THEOplayerSDK.AdEvent {
  final public let playedPercentage: Swift.Double?
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?, playedPercentage: Swift.Double?)
  @objc deinit
}
@objc open class AdErrorEvent : ObjectiveC.NSObject, THEOplayerSDK.AdErrorEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let ad: (any THEOplayerSDK.Ad)?
  final public let error: Swift.String?
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?, error: Swift.String?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdTappedEvent : THEOplayerSDK.AdEvent {
  @_spi(Core) public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdClickedEvent : THEOplayerSDK.AdEvent {
  @_spi(Core) public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AddAdEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class UpdateAdEvent : THEOplayerSDK.AdEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.Ad)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdBreakEvent : ObjectiveC.NSObject, THEOplayerSDK.AdBreakEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let ad: (any THEOplayerSDK.AdBreak)?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdBreakBeginEvent : THEOplayerSDK.AdBreakEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.AdBreak)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdBreakEndEvent : THEOplayerSDK.AdBreakEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.AdBreak)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AddAdBreakEvent : THEOplayerSDK.AdBreakEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.AdBreak)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class UpdateAdBreakEvent : THEOplayerSDK.AdBreakEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.AdBreak)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RemoveAdBreakEvent : THEOplayerSDK.AdBreakEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.AdBreak)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdBreakChangeEvent : THEOplayerSDK.AdBreakEvent {
  public init(date: Foundation.Date, ad: (any THEOplayerSDK.AdBreak)?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class IrdetoDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public init(crmId: Swift.String, accountId: Swift.String, contentId: Swift.String, keyId: Swift.String, applicationId: Swift.String, sessionId: Swift.String? = nil, ticket: Swift.String? = nil, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol AVPlayerError : THEOplayerSDK.THEOError {
  var userInfo: [Swift.String : Any]? { get }
}
@_spi(Core) public class Debouncer {
  @_spi(Core) public init()
  @_spi(Core) public func debounce(delay: Foundation.TimeInterval, _ action: @escaping () -> Swift.Void)
  @_spi(Core) public func cancel()
  @_spi(Core) @objc deinit
}
@objc final public class KeySystemConfigurationCollection : ObjectiveC.NSObject {
  final public let fairplay: THEOplayerSDK.KeySystemConfiguration?
  final public let widevine: THEOplayerSDK.KeySystemConfiguration?
  public init(fairplay: THEOplayerSDK.KeySystemConfiguration? = nil, widevine: THEOplayerSDK.KeySystemConfiguration? = nil, commonHeaders: [Swift.String : Swift.String] = [:])
  @objc deinit
}
extension THEOplayerSDK.KeySystemConfigurationCollection : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class NetworkConfiguration : ObjectiveC.NSObject, Swift.Codable {
  final public let userAgent: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class NetworkConfigurationBuilder : ObjectiveC.NSObject {
  public var userAgent: Swift.String?
  public func build() -> THEOplayerSDK.NetworkConfiguration
  @objc override dynamic public init()
  @objc deinit
}
public struct TextTrackEventTypes {
  public static var CUE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.CueChangeEvent>
  public static var ADD_CUE: THEOplayerSDK.EventType<THEOplayerSDK.AddCueEvent>
  public static var REMOVE_CUE: THEOplayerSDK.EventType<THEOplayerSDK.RemoveCueEvent>
  public static var ENTER_CUE: THEOplayerSDK.EventType<THEOplayerSDK.EnterCueEvent>
  public static var EXIT_CUE: THEOplayerSDK.EventType<THEOplayerSDK.ExitCueEvent>
}
@_spi(Core) @_inheritsConvenienceInitializers public class AudioTrackListRouter : THEOplayerSDK.TrackListRouter<THEOplayerSDK.AudioTrackImpl>, THEOplayerSDK.AudioTrackList {
  @_spi(Core) override public init(context: THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl>)
  @_spi(Core) @objc deinit
}
@_spi(Core) @_inheritsConvenienceInitializers public class VideoTrackListRouter : THEOplayerSDK.TrackListRouter<THEOplayerSDK.VideoTrackImpl>, THEOplayerSDK.VideoTrackList {
  @_spi(Core) override public init(context: THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl>)
  @_spi(Core) @objc deinit
}
@_spi(Core) public class TrackListRouter<T> : THEOplayerSDK.MediaTrackListImpl<T> where T : THEOplayerSDK.MediaTrackImpl {
  @_spi(Core) public init(context: THEOplayerSDK.MediaTrackListImpl<T>)
  @_spi(Core) override public func reset()
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.TrackListRouter : THEOplayerSDK.MediaTrackListDelegate {
  @_spi(Core) public func onAddTrack(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) public func onRemoveTrack(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) public func onTrackListTrackEnabled(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) public func onTrackListTrackDisabled(_ track: any THEOplayerSDK.MediaTrack)
}
@_spi(Core) @_hasMissingDesignatedInitializers public class TextTrackListRouter : THEOplayerSDK.TextTrackListImplNative {
  @_spi(Core) override public var ignoreUserPreferences: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var notifyMetadataInAdvanceInterval: Foundation.TimeInterval {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var currentContext: THEOplayerSDK.TextTrackListImplNative {
    @_spi(Core) get
    @_spi(Core) set(newContext)
  }
  @_spi(Core) public init(context: THEOplayerSDK.TextTrackListImplNative)
  @_spi(Core) override public func reset()
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.TextTrackListRouter : THEOplayerSDK.TextTrackListRouterDelegate {
  @_spi(Core) public func onAddTrack(_ track: any THEOplayerSDK.TextTrack)
  @_spi(Core) public func onRemoveTrack(_ track: any THEOplayerSDK.TextTrack)
  @_spi(Core) public func onTextTrackChange(_ track: any THEOplayerSDK.TextTrack)
}
@_spi(Core) public func verboseLogger(filter: Swift.Bool, _ elements: Any...)
@_spi(Core) public func infoLogger(_ elements: Any...)
@_hasMissingDesignatedInitializers public class AdType : Swift.Codable {
  public static let linear: Swift.String
  public static let nonlinear: Swift.String
  public static let unknown: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_spi(Core) @_hasMissingDesignatedInitializers public class AirplayManager {
  @_spi(Core) public static func isAirplaying() -> Swift.Bool
  @_spi(Core) public static func isAirplayConnected() -> Swift.Bool
  @_spi(Core) public static func isMirroring() -> Swift.Bool
  @_spi(Core) @objc deinit
}
@_spi(Core) public class AirplaySessionDetector {
  @_spi(Core) weak public var delegate: (any THEOplayerSDK.AirplaySessionDetectorDelegate)?
  @_spi(Core) public init()
  @_spi(Core) @objc deinit
}
@_spi(Core) public protocol AirplaySessionDetectorDelegate : AnyObject {
  @_spi(Core) func routeChanged()
  @_spi(Core) func mirroringChanged(isMirroring: Swift.Bool)
}
@objc public protocol EventListener {
}
@_spi(Core) public struct EventSourceMessage {
  @_spi(Core) public let id: Swift.String
  @_spi(Core) public let event: Swift.String
  @_spi(Core) public let data: Swift.String
}
@_spi(Core) public protocol EventSourceDelegate : AnyObject {
  @_spi(Core) func onMessage(_ message: THEOplayerSDK.EventSourceMessage)
}
@_spi(Core) @objc public class EventSource : ObjectiveC.NSObject {
  @_spi(Core) public struct Configuration {
  }
  @_spi(Core) public init(url: Foundation.URL, configuration: THEOplayerSDK.EventSource.Configuration? = nil)
  @_spi(Core) public func open()
  @_spi(Core) public func close()
  @_spi(Core) public func addDelegate(_ delegate: any THEOplayerSDK.EventSourceDelegate)
  @_spi(Core) public func removeDelegate(_ delegate: any THEOplayerSDK.EventSourceDelegate)
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.EventSource : Foundation.URLSessionDataDelegate {
  @_spi(Core) @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @_spi(Core) @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
}
@_spi(Core) extension THEOplayerSDK.EventSource {
  @_spi(Core) public func onMessage(_ message: THEOplayerSDK.EventSourceMessage)
}
public struct InvalidUrlError : THEOplayerSDK.THEOBaseError, Swift.Error {
  public let name: Swift.String
  public let url: Swift.String
  public let stack: [Swift.String]?
  @_spi(Core) public init(url: Swift.String)
  public var message: Swift.String {
    get
  }
}
@_spi(Core) @_hasMissingDesignatedInitializers public class TrackUIDGenerator {
  @_spi(Core) public static let shared: THEOplayerSDK.TrackUIDGenerator
  @_spi(Core) public var nextTrackUid: Swift.Int {
    @_spi(Core) get
  }
  @_spi(Core) @objc deinit
}
public enum TextTrackMode : Swift.Int {
  case showing
  case hidden
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.TextTrackMode {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(_rawValue: Swift.String) throws
}
@_spi(Core) @objc public class AVPlayerTextTracksController : ObjectiveC.NSObject {
  @_spi(Core) final public let textTrackStyleController: THEOplayerSDK.AVTextTrackStyleController
  @_spi(Core) weak public var textTracks: (any THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList)?
  @_spi(Core) public init(contentPlayerState: any THEOplayerSDK.AVPlayerContainingContentPlayerProperties)
  @_spi(Core) public func sourceUpdated(source: THEOplayerSDK.SourceDescription)
  @_spi(Core) public func setPlayerItem(playerItem: AVFoundation.AVPlayerItem)
  #if compiler(>=5.3) && $AsyncAwait
  @_spi(Core) @_Concurrency.MainActor public func initTextTracks(fromCache assetCache: AVFoundation.AVAssetCache? = nil) async
  #endif
  @_spi(Core) public func textTrackEnable(type: THEOplayerSDK.TextTrackType, label: Swift.String, hidden: Swift.Bool)
  @_spi(Core) public func textTrackDisable(type: THEOplayerSDK.TextTrackType)
  @_spi(Core) public func reset()
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.AVPlayerTextTracksController : AVFoundation.AVPlayerItemLegibleOutputPushDelegate {
  @_spi(Core) @objc dynamic public func legibleOutput(_ output: AVFoundation.AVPlayerItemLegibleOutput, didOutputAttributedStrings strings: [Foundation.NSAttributedString], nativeSampleBuffers nativeSamples: [Any], forItemTime itemTime: CoreMedia.CMTime)
}
public protocol Network : THEOplayerSDK.EventDispatcherProtocol {
}
public struct PlayerEventTypes {
  public static var PLAY: THEOplayerSDK.EventType<THEOplayerSDK.PlayEvent>
  public static var PLAYING: THEOplayerSDK.EventType<THEOplayerSDK.PlayingEvent>
  public static var PAUSE: THEOplayerSDK.EventType<THEOplayerSDK.PauseEvent>
  public static var PROGRESS: THEOplayerSDK.EventType<THEOplayerSDK.ProgressEvent>
  public static var SEEKING: THEOplayerSDK.EventType<THEOplayerSDK.SeekingEvent>
  public static var SEEKED: THEOplayerSDK.EventType<THEOplayerSDK.SeekedEvent>
  public static var WAITING: THEOplayerSDK.EventType<THEOplayerSDK.WaitingEvent>
  public static var TIME_UPDATE: THEOplayerSDK.EventType<THEOplayerSDK.TimeUpdateEvent>
  public static var ENDED: THEOplayerSDK.EventType<THEOplayerSDK.EndedEvent>
  public static var RATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.RateChangeEvent>
  public static var READY_STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.ReadyStateChangeEvent>
  public static var LOADED_META_DATA: THEOplayerSDK.EventType<THEOplayerSDK.LoadedMetaDataEvent>
  public static var LOADED_DATA: THEOplayerSDK.EventType<THEOplayerSDK.LoadedDataEvent>
  public static var LOAD_START: THEOplayerSDK.EventType<THEOplayerSDK.LoadStartEvent>
  public static var CAN_PLAY: THEOplayerSDK.EventType<THEOplayerSDK.CanPlayEvent>
  public static var CAN_PLAY_THROUGH: THEOplayerSDK.EventType<THEOplayerSDK.CanPlayThroughEvent>
  public static var ERROR: THEOplayerSDK.EventType<THEOplayerSDK.ErrorEvent>
  public static var DURATION_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.DurationChangeEvent>
  public static var SOURCE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.SourceChangeEvent>
  public static var PRESENTATION_MODE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.PresentationModeChangeEvent>
  public static var ASPECT_RATIO_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.AspectRatioChangeEvent>
  public static var VOLUME_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.VolumeChangeEvent>
  public static var RESIZE: THEOplayerSDK.EventType<THEOplayerSDK.ResizeEvent>
  public static var DESTROY: THEOplayerSDK.EventType<THEOplayerSDK.DestroyEvent>
}
@_spi(Core) public protocol MediaTrackListDelegate : AnyObject {
  @_spi(Core) func onAddTrack(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) func onRemoveTrack(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) func onTrackListTrackEnabled(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) func onTrackListTrackDisabled(_ track: any THEOplayerSDK.MediaTrack)
}
@_spi(Core) public typealias IVideoTrackList = THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl> & THEOplayerSDK.VideoTrackList
@_spi(Core) public typealias IAudioTrackList = THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl> & THEOplayerSDK.AudioTrackList
@_spi(Core) open class MediaTrackListImpl<T> : THEOplayerSDK.MediaTrackList, Swift.Sequence where T : THEOplayerSDK.MediaTrackImpl {
  @_spi(Core) final public let eventDispatcher: THEOplayerSDK.DefaultEventDispatcher
  @_spi(Core) public init()
  @_spi(Core) public var count: Swift.Int {
    @_spi(Core) get
  }
  @_spi(Core) public var enabled: T? {
    @_spi(Core) get
  }
  @_spi(Core) public func get(_ index: Swift.Int) -> any THEOplayerSDK.MediaTrack
  @_spi(Core) public subscript(index: Swift.Int) -> any THEOplayerSDK.MediaTrack {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public func addTrack(_ track: T)
  @_spi(Core) public func removeTrack(_ track: T)
  @_spi(Core) public func addDelegate(_ delegate: any THEOplayerSDK.MediaTrackListDelegate)
  @_spi(Core) public func removeDelegate(_ delegate: any THEOplayerSDK.MediaTrackListDelegate)
  @_spi(Core) public func makeIterator() -> Swift.Array<T>.Iterator
  @_spi(Core) public func reset()
  @_spi(Core) public typealias Element = Swift.IndexingIterator<Swift.Array<T>>.Element
  @_spi(Core) public typealias Iterator = Swift.Array<T>.Iterator
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.MediaTrackListImpl : THEOplayerSDK.EventDispatcherProtocol {
  @_spi(Core) public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  @_spi(Core) public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
@_spi(Core) extension THEOplayerSDK.MediaTrackListImpl {
  @_spi(Core) public func onTrackEnabled(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) public func onTrackDisabled(_ track: any THEOplayerSDK.MediaTrack)
}
@objc @_hasMissingDesignatedInitializers public class PiPConfiguration : ObjectiveC.NSObject, Swift.Codable {
  final public let retainPresentationModeOnSourceChange: Swift.Bool
  final public let requiresLinearPlayback: Swift.Bool
  final public let nativePictureInPicture: Swift.Bool
  final public let canStartPictureInPictureAutomaticallyFromInline: Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class PiPConfigurationBuilder : ObjectiveC.NSObject {
  public var retainPresentationModeOnSourceChange: Swift.Bool
  public var requiresLinearPlayback: Swift.Bool
  public var nativePictureInPicture: Swift.Bool
  public var canStartPictureInPictureAutomaticallyFromInline: Swift.Bool
  public func build() -> THEOplayerSDK.PiPConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ChromecastConnectionDelegate {
  @objc optional func onStart(sourceDescription: THEOplayerSDK.SourceDescription?) -> THEOplayerSDK.SourceDescription?
  @objc optional func onStop(sourceDescription: THEOplayerSDK.SourceDescription?) -> THEOplayerSDK.SourceDescription?
  @objc optional func onJoin(sourceDescription: THEOplayerSDK.SourceDescription?) -> THEOplayerSDK.SourceDescription?
  @objc optional func onLeave(sourceDescription: THEOplayerSDK.SourceDescription?) -> THEOplayerSDK.SourceDescription?
}
@objc @_hasMissingDesignatedInitializers public class GoogleDAILiveConfiguration : THEOplayerSDK.GoogleDAIConfiguration {
  public var assetKey: Swift.String
  public init(assetKey: Swift.String, apiKey: Swift.String, authToken: Swift.String?, streamActivityMonitorID: Swift.String?, adTagParameters: [Swift.String : Swift.String]?)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum PresentationMode : Swift.Int {
  case inline
  case fullscreen
  case pictureInPicture
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.PresentationMode {
  public var _rawValue: Swift.String {
    get
    set
  }
}
extension THEOplayerSDK.THEOplayer {
  public var developerSettings: (any THEOplayerSDK.DeveloperSettings)? {
    get
    set
  }
}
public protocol PictureInPicture {
  var currentCorner: THEOplayerSDK.PictureInPictureCorner? { get }
  func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?, visibility: Swift.Double?, margin: THEOplayerSDK.THEOMargins?)
  @available(iOS 14.0, tvOS 14.0, *)
  var nativePictureInPictureDelegate: (any AVKit.AVPictureInPictureControllerDelegate)? { get set }
  func configure(configuration: THEOplayerSDK.PiPConfiguration)
}
extension THEOplayerSDK.PictureInPicture {
  public func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?)
  public func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?, visibility: Swift.Double?)
  public func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?, margin: THEOplayerSDK.THEOMargins?)
}
@available(iOS 14.0, tvOS 14.0, *)
@objc public protocol AVPictureInPictureControllerDelegateExtended : AVKit.AVPictureInPictureControllerDelegate {
  @objc optional func pictureInPictureDidBecomePossible()
  @objc optional func pictureInPictureDidBecomeNotPossible()
}
@_inheritsConvenienceInitializers public class EventedArray<Element> : THEOplayerSDK.THEOArray<Element>, THEOplayerSDK.EventDispatcherProtocol {
  public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  override public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class KeyOSDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public var customdata: Swift.String?
  public init(customdata: Swift.String?, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_spi(Core) public protocol InternalCastIntegration : THEOplayerSDK.InternalContentPlayerIntegration {
  @_spi(Core) var casting: Swift.Bool { get }
  @_spi(Core) var error: THEOplayerSDK.CastError? { get }
  @_spi(Core) var receiverName: Swift.String? { get }
  @_spi(Core) var state: THEOplayerSDK.PlayerCastState? { get }
  @_spi(Core) func setConnectionDelegate(_ delegate: (any THEOplayerSDK.ChromecastConnectionDelegate)?)
  @_spi(Core) func start()
  @_spi(Core) func stop()
  @_spi(Core) func join()
  @_spi(Core) func leave()
  @_spi(Core) func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  @_spi(Core) func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol Cache : AnyObject, THEOplayerSDK.EventDispatcherProtocol {
  var status: THEOplayerSDK.CacheStatus { get }
  var tasks: [any THEOplayerSDK.CachingTask] { get }
  func createTask(source: THEOplayerSDK.SourceDescription, parameters: THEOplayerSDK.CachingParameters?) -> (any THEOplayerSDK.CachingTask)?
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  var developerSettings: (any THEOplayerSDK.DeveloperSettings)? { get set }
}
public enum CacheStatus : Swift.Int {
  case uninitialised
  case initialised
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.CacheStatus {
  public var _rawValue: Swift.String {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers public class CachingParameters : ObjectiveC.NSObject, Swift.Codable {
  public var expirationDate: Foundation.Date
  public var bandwidth: Swift.Int?
  public var allowsCellularAccess: Swift.Bool
  public var preferredTrackSelection: THEOplayerSDK.CachingParametersTrackSelection
  public var network: THEOplayerSDK.NetworkConfiguration?
  public init(expirationDate: Foundation.Date, bandwidth: Swift.Int? = nil)
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol CachingTask : THEOplayerSDK.EventDispatcherProtocol {
  var id: Swift.String { get }
  var status: THEOplayerSDK.CachingTaskStatus { get }
  var source: THEOplayerSDK.SourceDescription { get }
  var parameters: THEOplayerSDK.CachingParameters { get }
  var duration: Swift.Double { get }
  var cached: [THEOplayerSDK.TimeRange] { get }
  var secondsCached: Swift.Double { get }
  var percentageCached: Swift.Double { get }
  var bytesCached: Swift.UInt { get }
  func start()
  func remove()
  func pause()
  var license: any THEOplayerSDK.CachingTaskLicense { get }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public enum CachingTaskStatus : Swift.Int {
  case idle
  case loading
  case done
  case error
  case evicted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CacheStatusIdleReason : Swift.Int {
  case notStarted
  case paused
  case lostNetwork
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.CachingTaskStatus {
  public var _rawValue: Swift.String {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers public class CachingParametersTrackSelection : ObjectiveC.NSObject, Swift.Codable {
  final public let audioTrackSelection: [Swift.String]
  final public let textTrackSelection: [Swift.String]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CachingParametersTrackSelectionBuilder : ObjectiveC.NSObject {
  public var audioTrackSelection: [Swift.String]
  public var textTrackSelection: [Swift.String]
  public func build() -> THEOplayerSDK.CachingParametersTrackSelection
  @objc override dynamic public init()
  @objc deinit
}
extension THEOplayerSDK.THEOplayer {
  public var ads: any THEOplayerSDK.Ads {
    get
  }
  public var pip: (any THEOplayerSDK.PictureInPicture)? {
    get
    set
  }
  public var fullscreenOrientationCoupling: Swift.Bool {
    get
    set
  }
  public static var cache: any THEOplayerSDK.Cache {
    get
  }
}
@_spi(Core) public protocol AVPlayerContentPlayerNativeViewInterface : AnyObject {
  @_spi(Core) var playerLayer: AVFoundation.AVPlayerLayer { get }
  @_spi(Core) var avPlayer: AVFoundation.AVPlayer { get }
}
@_spi(Core) public enum AudioTrackKind : Swift.String {
  @_spi(Core) case MAIN
  @_spi(Core) case MAIN_DESCRIPTION
  @_spi(Core) case DESCRIPTION
  @_spi(Core) case ALTERNATIVE
  @_spi(Core) public init?(rawValue: Swift.String)
  @_spi(Core) public typealias RawValue = Swift.String
  @_spi(Core) public var rawValue: Swift.String {
    @_spi(Core) get
  }
}
@_spi(Core) @objc public class AVPlayerContentPlayerNative : THEOplayerSDK.ContentPlayerNative, THEOplayerSDK.AVPlayerContentPlayerNativeViewInterface, THEOplayerSDK.DebugLayerProvider {
  @_spi(Core) final public let avPlayer: AVFoundation.AVPlayer
  @_spi(Core) override public var view: UIKit.UIView {
    @_spi(Core) get
  }
  @_spi(Core) final public let avPlayerView: THEOplayerSDK.AVPlayerView
  @_spi(Core) public var playerLayer: AVFoundation.AVPlayerLayer {
    @_spi(Core) get
  }
  @_spi(Core) public var removePlayerItemOnReset: Swift.Bool
  @_spi(Core) override public var currentTime: Swift.Double? {
    @_spi(Core) get
  }
  @_spi(Core) override public var videoHeight: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) override public var videoWidth: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) override public var videoRect: CoreFoundation.CGRect? {
    @_spi(Core) get
  }
  @_spi(Core) public var initialProgramDateTime: Foundation.Date? {
    @_spi(Core) get
  }
  @_spi(Core) override public var currentProgramDateTime: Foundation.Date? {
    @_spi(Core) get
  }
  @_spi(Core) override public var textTrackStyle: (any THEOplayerSDK.TextTrackStyle)? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var volume: Swift.Float {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var muted: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var preventsDisplaySleepDuringVideoPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public var allowsExternalPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public init(properties: THEOplayerSDK.ContentPlayerProperties, underlying: AVFoundation.AVPlayer = AVPlayer())
  @_spi(Core) override public func sourceUpdated(source: THEOplayerSDK.SourceDescription)
  @_spi(Core) override public func presentationModeChanged(presentationMode: THEOplayerSDK.PresentationMode)
  @_spi(Core) override public func fullscreenAspectRatioUpdated(aspectRatio: THEOplayerSDK.AspectRatio)
  @_spi(Core) override public func textTrackEnable(type: THEOplayerSDK.TextTrackType, label: Swift.String, hidden: Swift.Bool)
  @_spi(Core) override public func textTrackDisable(type: THEOplayerSDK.TextTrackType)
  @_spi(Core) override public func audioTrackEnabled(label: Swift.String)
  @_spi(Core) override public func audioTrackDisabled()
  @_spi(Core) override public func videoTrackEnabled(label: Swift.String)
  @_spi(Core) override public func videoTrackDisabled()
  @_spi(Core) override public func play()
  @_spi(Core) override public func pause()
  @_spi(Core) override public func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) override public func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) override public func enterBackground(continuePlayback: Swift.Bool)
  @_spi(Core) override public func exitBackground()
  @_spi(Core) override public func resetContentPlayerState()
  @_spi(Core) override public func destroyContentPlayer()
  @_spi(Core) override public func startAirplay()
  @_spi(Core) override public func stopAirplay()
  @_spi(Core) override public func isAirplaySupported() -> Swift.Bool
  @_spi(Core) override public var abr: any THEOplayerSDK.ABRConfiguration {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) override public func initVideoRectObserver(delegateObject: ObjectiveC.NSObject, delegateKeyPath: Swift.String) -> THEOplayerSDK.ChainObserver<CoreFoundation.CGRect>
  @_spi(Core) @objc deinit
}
@_spi(Core) public protocol AVPlayerContainingContentPlayerProperties : THEOplayerSDK.ContentPlayerProperties {
  @_spi(Core) var avPlayer: AVFoundation.AVPlayer { get }
}
@_spi(Core) extension THEOplayerSDK.AVPlayerContentPlayerNative {
  @_spi(Core) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@_spi(Core) @objc @_hasMissingDesignatedInitializers public class AdsImplNative : THEOplayerSDK.DefaultEventDispatcher, THEOplayerSDK.Ads {
  @_spi(Core) public func getIntegrationByKind(_ kind: THEOplayerSDK.IntegrationKind) -> (any THEOplayerSDK.AdsIntegration)?
  @_spi(Core) public var playing: Swift.Bool {
    @_spi(Core) get
  }
  @_spi(Core) public var currentAds: [any THEOplayerSDK.Ad] {
    @_spi(Core) get
  }
  @_spi(Core) public var currentAdBreak: (any THEOplayerSDK.AdBreak)? {
    @_spi(Core) get
  }
  @_spi(Core) public var scheduledAds: [any THEOplayerSDK.Ad] {
    @_spi(Core) get
  }
  @_spi(Core) public var scheduledAdBreaks: [any THEOplayerSDK.AdBreak] {
    @_spi(Core) get
  }
  @_spi(Core) public var omid: any THEOplayerSDK.Omid {
    @_spi(Core) get
  }
  @_spi(Core) public func schedule(adDescription: any THEOplayerSDK.AdDescription)
  @_spi(Core) public func skip()
  @_spi(Core) public func registerServerSideIntegration(integrationId: Swift.String, integrationFactory: (any THEOplayerSDK.ServerSideAdIntegrationController) -> any THEOplayerSDK.ServerSideAdIntegrationHandler)
  @_spi(Core) @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CueChangeEvent : ObjectiveC.NSObject, THEOplayerSDK.TrackEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let track: any THEOplayerSDK.Track
  @objc deinit
}
public protocol TextTrackCueEventProtocol : THEOplayerSDK.EventProtocol {
  var cue: any THEOplayerSDK.TextTrackCue { get }
}
@objc @_hasMissingDesignatedInitializers public class AddCueEvent : ObjectiveC.NSObject, THEOplayerSDK.TextTrackCueEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let cue: any THEOplayerSDK.TextTrackCue
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RemoveCueEvent : ObjectiveC.NSObject, THEOplayerSDK.TextTrackCueEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let cue: any THEOplayerSDK.TextTrackCue
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class EnterCueEvent : ObjectiveC.NSObject, THEOplayerSDK.TextTrackCueEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let cue: any THEOplayerSDK.TextTrackCue
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ExitCueEvent : ObjectiveC.NSObject, THEOplayerSDK.TextTrackCueEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let cue: any THEOplayerSDK.TextTrackCue
  @objc deinit
}
public protocol NetworkError : THEOplayerSDK.THEOError {
  var url: Swift.String? { get }
  var status: Swift.Int { get }
  var errorComment: Swift.String? { get }
}
@objc public class AdInit : ObjectiveC.NSObject {
  public init(type: Swift.String, timeOffset: Swift.Double? = nil, companions: [any THEOplayerSDK.CompanionAd] = [], id: Swift.String? = nil, skipOffset: Swift.Int? = nil, resourceURI: Swift.String? = nil, width: Swift.Int? = nil, height: Swift.Int? = nil, duration: Swift.Int? = nil, clickThrough: Swift.String? = nil)
  @objc deinit
}
@objc public class AdBreakInit : ObjectiveC.NSObject {
  public init(timeOffset: Swift.Int, maxDuration: Swift.Int? = nil)
  convenience public init(with timeOffset: Swift.Int, maxDuration: Foundation.NSNumber? = nil)
  @objc deinit
}
public protocol ServerSideAdIntegrationHandler {
  func setSource(source: THEOplayerSDK.SourceDescription) -> Swift.Bool
  func skipAd(ad: any THEOplayerSDK.Ad) -> Swift.Bool
  func resetSource() -> Swift.Bool
  func destroy()
}
extension THEOplayerSDK.ServerSideAdIntegrationHandler {
  public func setSource(source: THEOplayerSDK.SourceDescription) -> Swift.Bool
  public func skipAd(ad: any THEOplayerSDK.Ad) -> Swift.Bool
  public func resetSource() -> Swift.Bool
  public func destroy()
}
public protocol ServerSideAdIntegrationController {
  var integration: Swift.String { get }
  var ads: [any THEOplayerSDK.Ad] { get }
  var adBreaks: [any THEOplayerSDK.AdBreak] { get }
  func createAd(params: THEOplayerSDK.AdInit, adBreak: (any THEOplayerSDK.AdBreak)?) -> any THEOplayerSDK.Ad
  func updateAd(ad: any THEOplayerSDK.Ad, params: THEOplayerSDK.AdInit)
  func updateAdProgress(ad: any THEOplayerSDK.Ad, progress: Swift.Double)
  func beginAd(ad: any THEOplayerSDK.Ad)
  func endAd(ad: any THEOplayerSDK.Ad)
  func skipAd(ad: any THEOplayerSDK.Ad)
  func removeAd(ad: any THEOplayerSDK.Ad)
  func createAdBreak(params: THEOplayerSDK.AdBreakInit) -> any THEOplayerSDK.AdBreak
  func updateAdBreak(adBreak: any THEOplayerSDK.AdBreak, params: THEOplayerSDK.AdBreakInit)
  func removeAdBreak(adBreak: any THEOplayerSDK.AdBreak)
  func removeAllAds()
  func error(error: any Swift.Error)
  func fatalError(error: any Swift.Error, code: THEOplayerSDK.THEOErrorCode?)
}
open class EventType<T> where T : THEOplayerSDK.EventProtocol {
  final public let name: Swift.String
  public init(name: Swift.String)
  @objc deinit
}
public struct AudioTrackListEventTypes {
  public static var ADD_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.AddTrackEvent>
  public static var REMOVE_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.RemoveTrackEvent>
  public static var CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.TrackChangeEvent>
}
@_spi(WebVTT) public struct WebVTT {
  @_spi(WebVTT) public let cues: [THEOplayerSDK.WebVTTCue]
  @_spi(WebVTT) public init(webVttContent: Swift.String)
}
@_spi(WebVTT) public struct WebVTTCue {
  @_spi(WebVTT) public let startTime: Foundation.TimeInterval
  @_spi(WebVTT) public let endTime: Foundation.TimeInterval
  @_spi(WebVTT) public let text: Swift.String
}
@_spi(Core) public protocol RoutableIntegration : THEOplayerSDK.ContentPlayer, THEOplayerSDK.Integration {
  @_spi(Core) var backingPlayer: any THEOplayerSDK.ContentPlayer { get set }
}
extension Foundation.Bundle {
  @_spi(Core) public static var isForTesting: Swift.Bool {
    get
  }
}
@_spi(Core) @_inheritsConvenienceInitializers public class VideoTrackListImpl : THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl>, THEOplayerSDK.VideoTrackList {
  @_spi(Core) override public init()
  @_spi(Core) @objc deinit
}
public struct TextTrackCueEventTypes {
  public static var ENTER: THEOplayerSDK.EventType<THEOplayerSDK.CueEnterEvent>
  public static var EXIT: THEOplayerSDK.EventType<THEOplayerSDK.CueExitEvent>
  public static var UPDATE: THEOplayerSDK.EventType<THEOplayerSDK.CueUpdateEvent>
}
@objc public class MetadataDescription : ObjectiveC.NSObject, Swift.Codable {
  public var metadataKeys: [Swift.String : Any]?
  public var title: Swift.String?
  public init(metadataKeys: [Swift.String : Any]?, title: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol ManifestInterceptor : AVFoundation.AVAssetResourceLoaderDelegate {
  var customScheme: Swift.String { get }
}
public protocol DeveloperSettings {
  var manifestInterceptor: (any THEOplayerSDK.ManifestInterceptor)? { get set }
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class AzureDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public var token: Swift.String
  public init(token: Swift.String, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_spi(Core) @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AVPlayerView : UIKit.UIView {
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @_spi(Core) @objc get
  }
  @_spi(Core) @objc deinit
}
@_spi(Core) public protocol DebugLayerProvider : AnyObject {
  @_spi(Core) var debugLayer: QuartzCore.CATextLayer? { get }
  @_spi(Core) var debugName: Swift.String { get }
}
@_spi(Core) extension THEOplayerSDK.DebugLayerProvider {
  @_spi(Core) public var debugLayer: QuartzCore.CATextLayer? {
    @_spi(Core) get
  }
  @_spi(Core) public var debugName: Swift.String {
    @_spi(Core) get
  }
  @_spi(Core) public func attachDebugLayer(on rootLayer: QuartzCore.CALayer)
}
@objc @_hasMissingDesignatedInitializers public class FairPlayDRMConfiguration : ObjectiveC.NSObject, THEOplayerSDK.FairPlayDRMConfigurationProtocol {
  public var fairplay: THEOplayerSDK.KeySystemConfiguration
  public var integration: THEOplayerSDK.DRMIntegration?
  public var headers: [[Swift.String : Swift.String]]?
  public var integrationParameters: Swift.Dictionary<Swift.String, Any>?
  public var customIntegrationId: Swift.String?
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil, licenseType: THEOplayerSDK.LicenseType? = nil, integrationParameters: Swift.Dictionary<Swift.String, Any>? = nil)
  public init(customIntegrationId: Swift.String, licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil, licenseType: THEOplayerSDK.LicenseType? = nil, integrationParameters: Swift.Dictionary<Swift.String, Any>? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class GoogleDAIVodConfiguration : THEOplayerSDK.GoogleDAIConfiguration {
  public var contentSourceID: Swift.String
  public var videoID: Swift.String
  public init(videoID: Swift.String, contentSourceID: Swift.String, apiKey: Swift.String, authToken: Swift.String?, streamActivityMonitorID: Swift.String?, adTagParameters: [Swift.String : Swift.String]?)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public struct TrackEventTypes {
  public static var UPDATE: THEOplayerSDK.EventType<THEOplayerSDK.TrackUpdateEvent>
}
@_spi(Core) public protocol AVQueuingContentPlayerDelegate : AnyObject {
  @_spi(Core) func onTextTrackCueAdded(trackLabel: Swift.String, content: Any, startTime: Swift.Double, endTime: Swift.Double)
}
@_spi(Core) public class AVQueuingContentPlayer : THEOplayerSDK.ContentPlayer {
  @_spi(Core) public var currentMediaItem: THEOplayerSDK.AVMediaItem? {
    get
  }
  @_spi(Core) final public let id: Foundation.UUID
  @_spi(Core) public var preload: THEOplayerSDK.Preload
  @_spi(Core) weak public var delegate: (any THEOplayerSDK.AVQueuingContentPlayerDelegate)?
  @_spi(Core) final public let avPlayer: AVFoundation.AVQueuePlayer
  @_spi(Core) final public let avPlayerView: THEOplayerSDK.AVPlayerView
  @_spi(Core) public var playerLayer: AVFoundation.AVPlayerLayer {
    @_spi(Core) get
  }
  @_spi(Core) public var played: [THEOplayerSDK.TimeRange]? {
    get
  }
  @_spi(Core) public var eventDispatcher: any THEOplayerSDK.EventDispatcher {
    @_spi(Core) get
  }
  @_spi(Core) public var view: UIKit.UIView {
    @_spi(Core) get
  }
  @_spi(Core) public var aspectRatio: THEOplayerSDK.AspectRatio {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var autoplay: Swift.Bool
  @_spi(Core) public var videoHeight: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) public var videoWidth: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) public var textTrackStyle: (any THEOplayerSDK.TextTrackStyle)?
  @_spi(Core) public var audioTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl> & THEOplayerSDK.AudioTrackList {
    @_spi(Core) get
  }
  @_spi(Core) public var videoTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl> & THEOplayerSDK.VideoTrackList {
    @_spi(Core) get
  }
  @_spi(Core) public var textTracks: any THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList {
    @_spi(Core) get
  }
  @_spi(Core) public var abr: any THEOplayerSDK.ABRConfiguration {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var currentTime: Swift.Double? {
    @_spi(Core) get
  }
  @_spi(Core) public var currentProgramDateTime: Foundation.Date? {
    @_spi(Core) get
  }
  @_spi(Core) public var duration: Swift.Double? {
    @_spi(Core) get
  }
  @_spi(Core) public var volume: Swift.Float {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var muted: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var preventsDisplaySleepDuringVideoPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var allowsExternalPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var seeking: Swift.Bool {
    @_spi(Core) get
  }
  @_spi(Core) public var ended: Swift.Bool {
    @_spi(Core) get
  }
  @_spi(Core) public var readyState: THEOplayerSDK.ReadyState {
    @_spi(Core) get
  }
  @_spi(Core) public var buffered: [THEOplayerSDK.TimeRange]? {
    @_spi(Core) get
  }
  @_spi(Core) public var seekable: [THEOplayerSDK.TimeRange]? {
    @_spi(Core) get
  }
  @_spi(Core) public var source: THEOplayerSDK.SourceDescription? {
    @_spi(Core) get
  }
  @_spi(Core) public var paused: Swift.Bool? {
    @_spi(Core) get
  }
  @_spi(Core) public var playbackRate: Swift.Double {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) public func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) public func addIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) public func removeIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) public func play()
  @_spi(Core) public func playNextSource()
  @_spi(Core) public func pause()
  @_spi(Core) public func setSource(_ newValue: THEOplayerSDK.SourceDescription?)
  @_spi(Core) public func addSource(_ newValue: THEOplayerSDK.SourceDescription)
  @_spi(Core) public func stop()
  @_spi(Core) public func resetContentPlayerState()
  @_spi(Core) public init()
  @_spi(Core) public func startAirplay()
  @_spi(Core) public func stopAirplay()
  @_spi(Core) public func isAirplaySupported() -> Swift.Bool
  @_spi(Core) public func enterBackground(continuePlayback: Swift.Bool)
  @_spi(Core) public func exitBackground()
  @_spi(Core) @objc deinit
  @_spi(Core) public typealias ID = Foundation.UUID
}
infix operator >>> : BitwiseShiftPrecedence
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class VerimatrixDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public init(keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum THEOErrorCode : Swift.Int32, Swift.Codable, Swift.CaseIterable {
  case CONFIGURATION_ERROR
  case LICENSE_ERROR
  case LICENSE_INVALID_DOMAIN
  case LICENSE_INVALID_SOURCE
  case LICENSE_EXPIRED
  case LICENSE_INVALID_FEATURE
  case SOURCE_INVALID
  case SOURCE_NOT_SUPPORTED
  case MANIFEST_LOAD_ERROR
  case MANIFEST_CORS_ERROR
  case MANIFEST_PARSE_ERROR
  case MEDIA_NOT_SUPPORTED
  case MEDIA_LOAD_ERROR
  case MEDIA_DECODE_ERROR
  case MEDIA_AVPLAYER_ERROR
  case MEDIA_ABORTED
  case NETWORK_ERROR
  case NETWORK_TIMEOUT
  case CONTENT_PROTECTION_ERROR
  case CONTENT_PROTECTION_NOT_SUPPORTED
  case CONTENT_PROTECTION_CONFIGURATION_MISSING
  case CONTENT_PROTECTION_CONFIGURATION_INVALID
  case CONTENT_PROTECTION_INITIALIZATION_INVALID
  case CONTENT_PROTECTION_CERTIFICATE_ERROR
  case CONTENT_PROTECTION_CERTIFICATE_INVALID
  case CONTENT_PROTECTION_LICENSE_ERROR
  case CONTENT_PROTECTION_LICENSE_INVALID
  case CONTENT_PROTECTION_KEY_EXPIRED
  case CONTENT_PROTECTION_KEY_MISSING
  case CONTENT_PROTECTION_OUTPUT_RESTRICTED
  case CONTENT_PROTECTION_INTERNAL_ERROR
  case SUBTITLE_LOAD_ERROR
  case SUBTITLE_CORS_ERROR
  case SUBTITLE_PARSE_ERROR
  case VR_PLATFORM_UNSUPPORTED
  case VR_PRESENTATION_ERROR
  case VR_PERMISSION_ERROR
  case AD_ERROR
  case AD_BLOCKER_DETECTED
  case FULLSCREEN_ERROR
  case CACHE_SOURCE_ERROR
  case CACHE_CONTENT_PROTECTION_ERROR
  case THEO_LIVE_UNKNOWN_ERROR
  case THEO_LIVE_CHANNEL_NOT_FOUND
  case THEO_LIVE_END_OF_DEMO
  case THEO_LIVE_ANALYTICS_ERROR
  case MILLICAST_UNKNOWN_ERROR
  case MILLICAST_HTTP_ERROR
  case MILLICAST_ABR_CONFIGURATION_ERROR
  case MILLICAST_TRACK_DISABLING_ERROR
  case MILLICAST_TRACK_ENABLING_ERROR
  case MILLICAST_DISCONNECT_ERROR
  case MILLICAST_SUBSCRIBE_ERROR
  case MILLICAST_SET_VOLUME_ERROR
  case MILLCAST_WEBRTC_SIGNALING_ERROR
  public init?(rawValue: Swift.Int32)
  public typealias AllCases = [THEOplayerSDK.THEOErrorCode]
  public typealias RawValue = Swift.Int32
  public static var allCases: [THEOplayerSDK.THEOErrorCode] {
    get
  }
  public var rawValue: Swift.Int32 {
    get
  }
}
@_spi(Core) public typealias Transformer = (_ event: any THEOplayerSDK.EventProtocol) -> (any THEOplayerSDK.EventProtocol)?
@_spi(Core) public protocol EventDispatcher : AnyObject, THEOplayerSDK.DefaultIdentifiable, THEOplayerSDK.EventDispatcherProtocol {
  @_spi(Core) func pipe(_ to: any THEOplayerSDK.EventDispatcher, transform: THEOplayerSDK.Transformer?)
  @_spi(Core) func unpipe(_ dispatcher: any THEOplayerSDK.EventDispatcher)
  @_spi(Core) func dispatchEvent(event: any THEOplayerSDK.EventProtocol)
}
@_spi(Core) extension THEOplayerSDK.EventDispatcher {
  @_spi(Core) public func pipe(_ to: any THEOplayerSDK.EventDispatcher, transform: THEOplayerSDK.Transformer? = nil)
}
@_spi(Core) @objc @_inheritsConvenienceInitializers open class DefaultEventDispatcher : ObjectiveC.NSObject, THEOplayerSDK.EventDispatcherProtocol, THEOplayerSDK.EventDispatcher {
  @_spi(Core) final public let id: Foundation.UUID
  @_spi(Core) public func pipe(_ to: any THEOplayerSDK.EventDispatcher, transform: THEOplayerSDK.Transformer? = nil)
  @_spi(Core) public func unpipe(_ dispatcher: any THEOplayerSDK.EventDispatcher)
  @_spi(Core) public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  @_spi(Core) public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  @_spi(Core) public func dispatchEvent(event: any THEOplayerSDK.EventProtocol)
  @_spi(Core) public func removeEventListeners()
  @_spi(Core) @objc override dynamic public init()
  @_spi(Core) public typealias ID = Foundation.UUID
  @_spi(Core) @objc deinit
}
public struct CachingTaskEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.CacheEvent>
  public static var PROGRESS: THEOplayerSDK.EventType<THEOplayerSDK.CacheEvent>
}
@objc @_hasMissingDesignatedInitializers public class NetworkErrorEvent : ObjectiveC.NSObject, THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let error: (any THEOplayerSDK.NetworkError)?
  @objc deinit
}
public class ExitBadNetworkModeEvent : THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  @_spi(Core) public init(date: Foundation.Date = Date())
  @objc deinit
}
public class EnterBadNetworkModeEvent : THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  @_spi(Core) public init(date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class DRMTodayDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public var token: Swift.String?
  public var userId: Swift.String?
  public var sessionId: Swift.String?
  public var merchant: Swift.String?
  public init(token: Swift.String? = nil, userId: Swift.String? = nil, sessionId: Swift.String? = nil, merchant: Swift.String? = nil, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol AdBreak {
  var ads: [any THEOplayerSDK.Ad] { get }
  var maxDuration: Swift.Int { get }
  var maxRemainingDuration: Swift.Double { get }
  var timeOffset: Swift.Int { get }
  var integration: THEOplayerSDK.AdIntegrationKind { get }
  var customIntegration: Swift.String? { get }
}
@objc public class SourceAbrConfiguration : ObjectiveC.NSObject, Swift.Codable {
  final public let maxBitrate: Swift.Double?
  public init(maxBitrate: Swift.Double?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_spi(Core) public protocol PictureInPictureControllerNativeExposable {
  @_spi(Core) @available(tvOS 14.0, *)
  var avPiPControllerDelegate: any AVKit.AVPictureInPictureControllerDelegate { get }
  @_spi(Core) var avPlayer: AVFoundation.AVPlayer? { get }
}
@objc public class Request : ObjectiveC.NSObject, Swift.Codable {
  public var url: Swift.String
  public var method: Swift.String
  public var headers: [Swift.String : Swift.String]
  public var body: Foundation.Data?
  public init(url: Swift.String, method: Swift.String, headers: [Swift.String : Swift.String], body: Foundation.Data?)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CertificateRequest : THEOplayerSDK.Request {
  override public init(url: Swift.String, method: Swift.String, headers: [Swift.String : Swift.String], body: Foundation.Data?)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LicenseRequest : THEOplayerSDK.Request {
  public var fairplaySkdUrl: Swift.String?
  public init(url: Swift.String, method: Swift.String, headers: [Swift.String : Swift.String], body: Foundation.Data?, fairplaySkdUrl: Swift.String?, useCredentials: Swift.Bool)
  @objc deinit
}
public protocol MediaTrackList : THEOplayerSDK.EventDispatcherProtocol {
  var count: Swift.Int { get }
  func get(_ index: Swift.Int) -> any THEOplayerSDK.MediaTrack
  @available(*, deprecated, message: "Using subscript is deprecated and will be removed with the next major version. Please use `get(_ index: Int)` instead.")
  subscript(index: Swift.Int) -> any THEOplayerSDK.MediaTrack { get set }
}
public protocol VideoTrackList : THEOplayerSDK.MediaTrackList {
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol AudioTrackList : THEOplayerSDK.MediaTrackList {
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
@_spi(Core) public protocol AirplayDelegate : AnyObject {
  @_spi(Core) func startAirplay()
  @_spi(Core) func stopAirplay()
}
@_spi(Core) public class DispatchObserver {
  @_spi(Core) public init(dispatcher: any THEOplayerSDK.EventDispatcherProtocol, eventListeners: [any THEOplayerSDK.RemovableEventListenerProtocol])
  @_spi(Core) @objc deinit
}
public enum TextTrackKind : Swift.Int {
  case none
  case subtitles
  case captions
  case description
  case chapters
  case metadata
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.TextTrackKind : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum TextTrackFormat : Swift.Int {
  case none
  case WebVTT
  case SRT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.TextTrackFormat : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class GoogleDAITypedSource : THEOplayerSDK.TypedSource {
  convenience public init(ssai: THEOplayerSDK.GoogleDAIConfiguration)
  override public init(src: Swift.String, type: Swift.String, drm: (any THEOplayerSDK.DRMConfiguration)? = nil, crossOrigin: THEOplayerSDK.CrossOrigin? = nil, ssai: (any THEOplayerSDK.ServerSideAdInsertionConfiguration)? = nil, hlsDateRange: Swift.Bool? = nil, headers: [Swift.String : Swift.String]? = nil, cmcd: Swift.Bool? = nil)
  @objc deinit
}
public enum CrossOrigin : Swift.Int {
  case none
  case anonymous
  case useCredentials
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.CrossOrigin : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc open class TypedSource : ObjectiveC.NSObject {
  public var src: Swift.String
  public var type: Swift.String
  public var drm: (any THEOplayerSDK.DRMConfiguration)?
  public var crossOrigin: THEOplayerSDK.CrossOrigin?
  public var hlsDateRange: Swift.Bool?
  public var ssai: (any THEOplayerSDK.ServerSideAdInsertionConfiguration)?
  public var headers: [Swift.String : Swift.String]?
  public var cmcd: Swift.Bool?
  public init(src: Swift.String, type: Swift.String, drm: (any THEOplayerSDK.DRMConfiguration)? = nil, crossOrigin: THEOplayerSDK.CrossOrigin? = nil, ssai: (any THEOplayerSDK.ServerSideAdInsertionConfiguration)? = nil, hlsDateRange: Swift.Bool? = nil, headers: [Swift.String : Swift.String]? = nil, cmcd: Swift.Bool? = nil)
  @available(*, deprecated, message: "We will no longer conform `TypedSource` to `Decodable` in the future")
  required convenience public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension THEOplayerSDK.TypedSource : Swift.Codable {
  @available(*, deprecated, message: "We will no longer conform `TypedSource` to `Encodable` in the future")
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol ServerSideAdInsertionConfiguration {
  var integration: THEOplayerSDK.SSAIIntegrationId { get }
}
public protocol CustomServerSideAdInsertionConfiguration : THEOplayerSDK.ServerSideAdInsertionConfiguration {
  var customIntegration: Swift.String { get }
}
extension THEOplayerSDK.CustomServerSideAdInsertionConfiguration {
  public var integration: THEOplayerSDK.SSAIIntegrationId {
    get
  }
}
public enum SSAIIntegrationId : Swift.Int {
  case GoogleDAISSAIIntegrationID
  case CustomSSAIIntegrationID
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.SSAIIntegrationId : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum StreamType : Swift.Int {
  case vod
  case live
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.StreamType : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol GoogleDAI {
  var snapback: Swift.Bool { get set }
  func contentTime(from streamTime: Swift.Double) -> Swift.Double
  func streamTime(from contentTime: Swift.Double) -> Swift.Double
}
@objc @_hasMissingDesignatedInitializers public class PlayerEvent : ObjectiveC.NSObject, THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CurrentTimeEvent : THEOplayerSDK.PlayerEvent {
  final public let currentTime: Swift.Double
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PlayEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PlayingEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PauseEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ProgressEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SeekingEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SeekedEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class WaitingEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class TimeUpdateEvent : THEOplayerSDK.CurrentTimeEvent {
  final public let currentProgramDateTime: Foundation.Date?
  public init(currentTime: Swift.Double, currentProgramDateTime: Foundation.Date?, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class EndedEvent : THEOplayerSDK.CurrentTimeEvent {
  public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RateChangeEvent : THEOplayerSDK.CurrentTimeEvent {
  final public let playbackRate: Swift.Double
  public init(currentTime: Swift.Double, date: Foundation.Date = Date(), playbackRate: Swift.Double)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class DurationChangeEvent : THEOplayerSDK.PlayerEvent {
  final public let duration: Swift.Double?
  public init(date: Foundation.Date = Date(), duration: Swift.Double?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SourceChangeEvent : THEOplayerSDK.PlayerEvent {
  final public let source: THEOplayerSDK.SourceDescription?
  public init(date: Foundation.Date = Date(), source: THEOplayerSDK.SourceDescription?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ReadyStateEvent : THEOplayerSDK.CurrentTimeEvent {
  final public let readyState: THEOplayerSDK.ReadyState
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ReadyStateChangeEvent : THEOplayerSDK.ReadyStateEvent {
  @_spi(Core) public init(currentTime: Swift.Double, date: Foundation.Date = Date(), readyState: THEOplayerSDK.ReadyState)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LoadedMetaDataEvent : THEOplayerSDK.ReadyStateEvent {
  @_spi(Core) public init(currentTime: Swift.Double, date: Foundation.Date = Date(), readyState: THEOplayerSDK.ReadyState)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LoadedDataEvent : THEOplayerSDK.ReadyStateEvent {
  @_spi(Core) public init(currentTime: Swift.Double, date: Foundation.Date = Date(), readyState: THEOplayerSDK.ReadyState)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LoadStartEvent : THEOplayerSDK.CurrentTimeEvent {
  @_spi(Core) public init(currentTime: Swift.Double, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CanPlayEvent : THEOplayerSDK.ReadyStateEvent {
  @_spi(Core) public init(currentTime: Swift.Double, date: Foundation.Date = Date(), readyState: THEOplayerSDK.ReadyState)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CanPlayThroughEvent : THEOplayerSDK.ReadyStateEvent {
  @_spi(Core) public init(currentTime: Swift.Double, date: Foundation.Date = Date(), readyState: THEOplayerSDK.ReadyState)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ErrorEvent : THEOplayerSDK.PlayerEvent {
  final public let error: Swift.String
  final public let errorObject: (any THEOplayerSDK.THEOError)?
  public init(error: Swift.String, errorObject: (any THEOplayerSDK.THEOError)?, date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PresentationModeChangeEvent : THEOplayerSDK.PlayerEvent {
  final public let presentationMode: THEOplayerSDK.PresentationMode
  @objc deinit
}
@objc public class AspectRatioChangeEvent : ObjectiveC.NSObject, THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let aspectRatio: THEOplayerSDK.AspectRatio
  @_spi(Core) public init(date: Foundation.Date = Date(), aspectRatio: THEOplayerSDK.AspectRatio)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class VolumeChangeEvent : THEOplayerSDK.CurrentTimeEvent {
  final public let volume: Swift.Float
  final public let deviceVolume: Swift.Float
  public init(currentTime: Swift.Double, date: Foundation.Date = Date(), volume: Swift.Float)
  @objc deinit
}
@_spi(Core) public class AVPlayerStallEvent : THEOplayerSDK.EventProtocol {
  @_spi(Core) final public let type: Swift.String
  @_spi(Core) final public let date: Foundation.Date
  @_spi(Core) public init(date: Foundation.Date = Date())
  @_spi(Core) @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ResizeEvent : THEOplayerSDK.PlayerEvent {
  public init(date: Foundation.Date = Date())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class DestroyEvent : THEOplayerSDK.PlayerEvent {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class VudrmDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public var token: Swift.String
  public init(token: Swift.String, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_spi(Core) public protocol ContentPlayer : AnyObject, THEOplayerSDK.DefaultIdentifiable {
  @_spi(Core) var eventDispatcher: any THEOplayerSDK.EventDispatcher { get }
  @_spi(Core) var aspectRatio: THEOplayerSDK.AspectRatio { get set }
  @_spi(Core) var preload: THEOplayerSDK.Preload { get set }
  @_spi(Core) var autoplay: Swift.Bool { get set }
  @_spi(Core) var source: THEOplayerSDK.SourceDescription? { get }
  @_spi(Core) var currentTime: Swift.Double? { get }
  @_spi(Core) var currentProgramDateTime: Foundation.Date? { get }
  @_spi(Core) var duration: Swift.Double? { get }
  @_spi(Core) var playbackRate: Swift.Double { get set }
  @_spi(Core) var volume: Swift.Float { get set }
  @_spi(Core) var muted: Swift.Bool { get set }
  @_spi(Core) var preventsDisplaySleepDuringVideoPlayback: Swift.Bool { get set }
  @_spi(Core) var allowsExternalPlayback: Swift.Bool { get set }
  @_spi(Core) var seeking: Swift.Bool { get }
  @_spi(Core) var paused: Swift.Bool? { get }
  @_spi(Core) var ended: Swift.Bool { get }
  @_spi(Core) var readyState: THEOplayerSDK.ReadyState { get }
  @_spi(Core) var buffered: [THEOplayerSDK.TimeRange]? { get }
  @_spi(Core) var played: [THEOplayerSDK.TimeRange]? { get }
  @_spi(Core) var seekable: [THEOplayerSDK.TimeRange]? { get }
  @_spi(Core) var videoHeight: Swift.Int? { get }
  @_spi(Core) var videoWidth: Swift.Int? { get }
  @_spi(Core) var abr: any THEOplayerSDK.ABRConfiguration { get set }
  @_spi(Core) var textTrackStyle: (any THEOplayerSDK.TextTrackStyle)? { get set }
  @_spi(Core) var audioTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl> & THEOplayerSDK.AudioTrackList { get }
  @_spi(Core) var videoTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl> & THEOplayerSDK.VideoTrackList { get }
  @_spi(Core) var textTracks: any THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList { get }
  @_spi(Core) func play()
  @_spi(Core) func pause()
  @_spi(Core) func stop()
  @_spi(Core) func setSource(_ newValue: THEOplayerSDK.SourceDescription?)
  @_spi(Core) func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) func resetContentPlayerState()
  @_spi(Core) func addIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) func removeIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) func startAirplay()
  @_spi(Core) func stopAirplay()
  @_spi(Core) func isAirplaySupported() -> Swift.Bool
  @_spi(Core) func enterBackground(continuePlayback: Swift.Bool)
  @_spi(Core) func exitBackground()
}
@_spi(Core) public protocol ContentPlayerView {
  @_spi(Core) var view: UIKit.UIView { get }
}
@objc open class GoogleImaAdDescription : ObjectiveC.NSObject, THEOplayerSDK.AdDescription, Swift.Codable {
  public var integration: THEOplayerSDK.AdIntegration?
  public var src: Foundation.URL
  public var timeOffset: Swift.String?
  public init(src: Swift.String, timeOffset: Swift.String? = nil)
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class THEOArray<Element> {
  public init()
  convenience public init(_ array: [Element])
  @objc deinit
}
extension THEOplayerSDK.THEOArray {
  public var first: Element? {
    get
  }
  public var last: Element? {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension THEOplayerSDK.THEOArray {
  public func first(where predicate: (Element) -> Swift.Bool) -> Element?
  public func last(where predicate: (Element) -> Swift.Bool) -> Element?
  public func filter(_ isIncluded: @escaping (Element) -> Swift.Bool) -> THEOplayerSDK.THEOArray<Element>
  public func firstIndex(where predicate: (Element) throws -> Swift.Bool) rethrows -> Swift.Int?
  public func sorted(by areInIncreasingOrder: (Element, Element) -> Swift.Bool) -> THEOplayerSDK.THEOArray<Element>
  public func map<ElementOfResult>(_ transform: @escaping (Element) -> ElementOfResult) -> [ElementOfResult]
  public func compactMap<ElementOfResult>(_ transform: (Element) -> ElementOfResult?) -> [ElementOfResult]
  public func reduce<ElementOfResult>(_ initialResult: ElementOfResult, _ nextPartialResult: @escaping (ElementOfResult, Element) -> ElementOfResult) -> ElementOfResult
  public func reduce<ElementOfResult>(into initialResult: ElementOfResult, _ updateAccumulatingResult: @escaping (inout ElementOfResult, Element) -> ()) -> ElementOfResult
  public func forEach(_ body: (Element) -> Swift.Void)
  public func contains(where predicate: (Element) -> Swift.Bool) -> Swift.Bool
  public func allSatisfy(_ predicate: (Element) -> Swift.Bool) -> Swift.Bool
}
extension THEOplayerSDK.THEOArray {
  public subscript(index: Swift.Int) -> Element? {
    get
  }
}
extension THEOplayerSDK.THEOArray where Element : Swift.Equatable {
  public func contains(_ element: Element) -> Swift.Bool
}
extension Swift.Comparable {
  @_spi(Core) public func clamped(to limits: Swift.ClosedRange<Self>) -> Self
}
@_spi(Core) public protocol THEOplayerInternalInterface : THEOplayerSDK.EventDispatcherProtocol, THEOplayerSDK.THEOplayerInternalTimeInterface, THEOplayerSDK.THEOplayerInternalViewInterface {
  @_spi(Core) var playerConfiguration: THEOplayerSDK.THEOplayerConfiguration { get set }
  @_spi(Core) var contentPlayer: THEOplayerSDK.ContentPlayerNative { get }
  @_spi(Core) var eventDispatcher: any THEOplayerSDK.EventDispatcher { get }
  @_spi(Core) var frame: CoreFoundation.CGRect { get set }
  @_spi(Core) var bounds: CoreFoundation.CGRect { get set }
  @_spi(Core) var center: CoreFoundation.CGPoint { get set }
  @_spi(Core) var autoresizingMask: UIKit.UIView.AutoresizingMask { get set }
  @_spi(Core) var videoHeight: Swift.Int { get }
  @_spi(Core) var videoWidth: Swift.Int { get }
  @_spi(Core) var videoRect: CoreFoundation.CGRect { get }
  @_spi(Core) var resizeTransitionEnabled: Swift.Bool { get set }
  @_spi(Core) var abr: any THEOplayerSDK.ABRConfiguration { get set }
  @_spi(Core) var aspectRatioConfig: THEOplayerSDK.AspectRatio { get set }
  @_spi(Core) var textTracks: any THEOplayerSDK.TextTrackList { get }
  @_spi(Core) var audioTracks: any THEOplayerSDK.AudioTrackList { get }
  @_spi(Core) var videoTracks: any THEOplayerSDK.VideoTrackList { get }
  @_spi(Core) var duration: Swift.Double? { get }
  @_spi(Core) var currentTime: Swift.Double { get set }
  @_spi(Core) var currentProgramDateTime: Foundation.Date? { get }
  @_spi(Core) var autoplay: Swift.Bool { get set }
  @_spi(Core) var source: THEOplayerSDK.SourceDescription? { get set }
  @_spi(Core) var src: Swift.String? { get }
  @_spi(Core) var volume: Swift.Float { get set }
  @_spi(Core) var muted: Swift.Bool { get set }
  @_spi(Core) var seeking: Swift.Bool { get }
  @_spi(Core) var paused: Swift.Bool { get }
  @_spi(Core) var ended: Swift.Bool { get }
  @_spi(Core) var preventsDisplaySleepDuringVideoPlayback: Swift.Bool { get set }
  @_spi(Core) var allowsExternalPlayback: Swift.Bool { get set }
  @_spi(Core) var preload: THEOplayerSDK.Preload { get set }
  @_spi(Core) var playbackRate: Swift.Double { get set }
  @_spi(Core) var buffered: [THEOplayerSDK.TimeRange] { get }
  @_spi(Core) var played: [THEOplayerSDK.TimeRange] { get }
  @_spi(Core) var seekable: [THEOplayerSDK.TimeRange] { get }
  @_spi(Core) var metrics: Any? { get }
  @_spi(Core) var presentationMode: THEOplayerSDK.PresentationMode { get set }
  @_spi(Core) var readyState: THEOplayerSDK.ReadyState { get }
  @_spi(Core) var error: Swift.String? { get }
  @_spi(Core) var remotePlayCommandObject: Any? { get set }
  @_spi(Core) var remotePauseCommandObject: Any? { get set }
  @_spi(Core) var backgroundPlaybackDelegate: (any THEOplayerSDK.BackgroundPlaybackDelegate)? { get set }
  @_spi(Core) var ads: any THEOplayerSDK.Ads { get }
  @_spi(Core) var pip: (any THEOplayerSDK.PictureInPicture)? { get }
  @_spi(Core) var pipController: THEOplayerSDK.PictureInPictureControllerNative? { get }
  @_spi(Core) var network: any THEOplayerSDK.Network { get }
  @_spi(Core) var fullscreen: any THEOplayerSDK.Fullscreen { get }
  @_spi(Core) var id: Swift.Int { get }
  @_spi(Core) func play()
  @_spi(Core) func pause()
  @_spi(Core) func stop(completionHandler: ((Swift.Bool?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) func setLayout(layout: THEOplayerSDK.PlayerViewLayout)
  @_spi(Core) func addAsSubview(of view: UIKit.UIView)
  @_spi(Core) func insertAsSubview(of view: UIKit.UIView, at: Swift.Int)
  @_spi(Core) func insertAsSubview(of view: UIKit.UIView, belowSubview siblingSubview: UIKit.UIView)
  @_spi(Core) func insertAsSubview(of view: UIKit.UIView, aboveSubview siblingSubview: UIKit.UIView)
  @_spi(Core) func isContained(in views: [UIKit.UIView]) -> Swift.Bool
  @_spi(Core) func destroy()
}
@_spi(Core) public protocol THEOplayerInternalViewInterface : AnyObject {
  @_spi(Core) var inlineView: UIKit.UIView { get }
  @_spi(Core) var playerViewController: THEOplayerSDK.PlayerViewController { get }
  @_spi(Core) var resizeTransitionEnabled: Swift.Bool { get }
}
@_spi(Core) public protocol THEOplayerInternalTimeInterface : AnyObject {
  @_spi(Core) var duration: Swift.Double? { get }
  @_spi(Core) var currentTime: Swift.Double { get }
  @_spi(Core) var currentProgramDateTime: Foundation.Date? { get }
}
@objc @_hasMissingDesignatedInitializers public class Metrics : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_spi(Core) extension Foundation.URLResponse {
  @_spi(Core) public func isSuccessfull() -> Swift.Bool?
}
public struct AdsEventTypes {
  public static var AD_BEGIN: THEOplayerSDK.EventType<THEOplayerSDK.AdBeginEvent>
  public static var AD_END: THEOplayerSDK.EventType<THEOplayerSDK.AdEndEvent>
  public static var AD_ERROR: THEOplayerSDK.EventType<THEOplayerSDK.AdErrorEvent>
  public static var AD_FIRST_QUARTILE: THEOplayerSDK.EventType<THEOplayerSDK.AdFirstQuartileEvent>
  public static var AD_MIDPOINT: THEOplayerSDK.EventType<THEOplayerSDK.AdMidpointEvent>
  public static var AD_THIRD_QUARTILE: THEOplayerSDK.EventType<THEOplayerSDK.AdThirdQuartileEvent>
  public static var AD_LOADED: THEOplayerSDK.EventType<THEOplayerSDK.AdLoadedEvent>
  public static var AD_IMPRESSION: THEOplayerSDK.EventType<THEOplayerSDK.AdImpressionEvent>
  public static var AD_SKIP: THEOplayerSDK.EventType<THEOplayerSDK.AdSkipEvent>
  public static var AD_BREAK_BEGIN: THEOplayerSDK.EventType<THEOplayerSDK.AdBreakBeginEvent>
  public static var AD_BREAK_END: THEOplayerSDK.EventType<THEOplayerSDK.AdBreakEndEvent>
  public static var AD_TAPPED: THEOplayerSDK.EventType<THEOplayerSDK.AdTappedEvent>
  public static var AD_CLICKED: THEOplayerSDK.EventType<THEOplayerSDK.AdClickedEvent>
  public static var ADD_AD_BREAK: THEOplayerSDK.EventType<THEOplayerSDK.AddAdBreakEvent>
  public static var UPDATE_AD_BREAK: THEOplayerSDK.EventType<THEOplayerSDK.UpdateAdBreakEvent>
  public static var REMOVE_AD_BREAK: THEOplayerSDK.EventType<THEOplayerSDK.RemoveAdBreakEvent>
  public static var AD_BREAK_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.AdBreakChangeEvent>
  public static var ADD_AD: THEOplayerSDK.EventType<THEOplayerSDK.AddAdEvent>
  public static var UPDATE_AD: THEOplayerSDK.EventType<THEOplayerSDK.UpdateAdEvent>
}
@_spi(Core) public class CheckedContinuationGuard<T, E> where E : Swift.Error {
  @_spi(Core) public init(continuation: _Concurrency.CheckedContinuation<T, E>)
  @_spi(Core) public func resume() where T == ()
  @_spi(Core) public func resume(with result: Swift.Result<T, E>)
  @_spi(Core) public func resume(returning value: T)
  @_spi(Core) public func resume(throwing error: E)
  @_spi(Core) @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CustomAttribute : ObjectiveC.NSObject, Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  convenience required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum DateRangeCustomAttributesError : Swift.Int, Swift.Error {
  case castFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CustomAttributes : ObjectiveC.NSObject, Swift.Codable {
  public func getDouble(for key: Swift.String) throws -> Swift.Double?
  public func getString(for key: Swift.String) throws -> Swift.String?
  public func getBytes(for key: Swift.String) throws -> Foundation.Data?
  public func getAttributesAsDictionary() -> [Swift.String : THEOplayerSDK.CustomAttribute]
  public func encode(to encoder: any Swift.Encoder) throws
  convenience required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
#if compiler(>=5.3) && $RethrowsProtocol
@_spi(Core) public class SwitchingAsyncSequence<Seq> where Seq : _Concurrency.AsyncSequence {
  @_spi(Core) public typealias Element = Seq.Element
  @_spi(Core) final public let stream: _Concurrency.AsyncStream<THEOplayerSDK.SwitchingAsyncSequence<Seq>.Element>
  @_spi(Core) public init()
  @_spi(Core) public func replace(source newSource: Seq)
  @_spi(Core) @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_spi(Core) extension THEOplayerSDK.SwitchingAsyncSequence : _Concurrency.AsyncSequence {
  @_spi(Core) public func makeAsyncIterator() -> _Concurrency.AsyncStream<THEOplayerSDK.SwitchingAsyncSequence<Seq>.Element>.AsyncIterator
  @_spi(Core) public typealias AsyncIterator = _Concurrency.AsyncStream<THEOplayerSDK.SwitchingAsyncSequence<Seq>.Element>.AsyncIterator
}
#endif
@objc @_hasMissingDesignatedInitializers public class CachingTaskStateChangeEvent : THEOplayerSDK.CacheEvent {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CachingTaskErrorStateChangeEvent : THEOplayerSDK.CachingTaskStateChangeEvent {
  final public let error: (any THEOplayerSDK.THEOError)?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CachingTaskIdleStateChangeEvent : THEOplayerSDK.CachingTaskStateChangeEvent {
  final public let idleReason: THEOplayerSDK.CacheStatusIdleReason
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CachingTaskProgressEvent : THEOplayerSDK.CacheEvent {
  @objc deinit
}
@_spi(Core) public protocol ContentPlayerFactory : Swift.Identifiable {
  @_spi(Core) func canPlaySource(source: THEOplayerSDK.SourceDescription) -> Swift.Bool
  @_spi(Core) func createPlayer(properties: THEOplayerSDK.ContentPlayerProperties) -> any THEOplayerSDK.ContentPlayer
}
@_spi(Core) @objc public enum NetworkConnectionState : Swift.Int {
  @_spi(Core) case unknown = 1
  @_spi(Core) case connected = 2
  @_spi(Core) case notConnected = 3
  @_spi(Core) public init?(rawValue: Swift.Int)
  @_spi(Core) public typealias RawValue = Swift.Int
  @_spi(Core) public var rawValue: Swift.Int {
    @_spi(Core) get
  }
}
@_spi(Core) @objc public protocol NetworkStateChangeListener {
  @_spi(Core) @objc func networkConnectionDidChange(state: THEOplayerSDK.NetworkConnectionState)
}
@_spi(Core) @_hasMissingDesignatedInitializers final public class NetworkManager {
  @_spi(Core) public static let sharedInstance: THEOplayerSDK.NetworkManager
  @_spi(Core) final public var currentState: THEOplayerSDK.NetworkConnectionState {
    @_spi(Core) get
  }
  @_spi(Core) final public func addNetworkStateChangeListener(_ listener: any THEOplayerSDK.NetworkStateChangeListener, triggerWithInitalState: Swift.Bool = false)
  @_spi(Core) final public func removeNetworkStateChangeListener(_ listener: any THEOplayerSDK.NetworkStateChangeListener)
  @_spi(Core) @objc deinit
}
public protocol Ad {
  var adBreak: any THEOplayerSDK.AdBreak { get }
  var companions: [any THEOplayerSDK.CompanionAd] { get }
  var type: Swift.String { get }
  var id: Swift.String? { get }
  var skipOffset: Swift.Int? { get }
  var resourceURI: Swift.String? { get }
  var width: Swift.Int? { get }
  var height: Swift.Int? { get }
  var integration: THEOplayerSDK.AdIntegrationKind { get }
  var duration: Swift.Int? { get }
  var clickThrough: Swift.String? { get }
  var customIntegration: Swift.String? { get }
}
public protocol LinearAd : THEOplayerSDK.Ad {
  var duration: Swift.Int? { get }
  var mediaFiles: [any THEOplayerSDK.MediaFile] { get }
}
public protocol MediaFile {
  var delivery: Swift.String { get }
  var resourceURI: Swift.String { get }
  var type: Swift.String { get }
  var height: Swift.Int { get }
  var width: Swift.Int { get }
}
public protocol NonLinearAd : THEOplayerSDK.Ad {
  var clickThrough: Swift.String? { get }
}
public protocol GoogleImaAd : THEOplayerSDK.Ad {
  var adSystem: Swift.String? { get }
  var creativeId: Swift.String? { get }
  var wrapperAdIds: [Swift.String] { get }
  var wrapperAdSystems: [Swift.String] { get }
  var wrapperCreativeIds: [Swift.String] { get }
  var vastMediaBitrate: Swift.Int { get }
  var universalAdIds: [any THEOplayerSDK.UniversalAdId] { get }
  var traffickingParameters: Swift.String { get }
}
public protocol UniversalAdId {
  var adIdValue: Swift.String { get }
  var adIdRegistry: Swift.String { get }
}
public enum AdIntegrationKind : Swift.Int {
  case theoads
  case google_ima
  case google_dai
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.AdIntegrationKind : Swift.Codable, Swift.CaseIterable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public typealias AllCases = [THEOplayerSDK.AdIntegrationKind]
  public static var allCases: [THEOplayerSDK.AdIntegrationKind] {
    get
  }
}
@_spi(Core) @objc @_hasMissingDesignatedInitializers public class AVMediaItem : ObjectiveC.NSObject {
  @_spi(Core) final public let sourceDescription: THEOplayerSDK.SourceDescription
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.AVMediaItem : AVFoundation.AVPlayerItemMetadataOutputPushDelegate {
  @_spi(Core) @objc dynamic public func metadataOutput(_ output: AVFoundation.AVPlayerItemMetadataOutput, didOutputTimedMetadataGroups groups: [AVFoundation.AVTimedMetadataGroup], from track: AVFoundation.AVPlayerItemTrack?)
}
public protocol MediaTrack : THEOplayerSDK.Track {
  var enabled: Swift.Bool { get set }
  var activeQualityBandwidth: Swift.Int { get }
}
public protocol VideoTrack : THEOplayerSDK.MediaTrack {
}
public protocol AudioTrack : THEOplayerSDK.MediaTrack {
  override var enabled: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers public class DependencyChecker {
  public struct Version : Swift.Equatable {
    public init(major: Swift.Int, minor: Swift.Int, patch: Swift.Int)
    public static func == (a: THEOplayerSDK.DependencyChecker.Version, b: THEOplayerSDK.DependencyChecker.Version) -> Swift.Bool
  }
  public struct Dependency {
    public init(bundleIdentifier: Swift.String, supportedVersion: THEOplayerSDK.DependencyChecker.Version)
  }
  public static let shared: THEOplayerSDK.DependencyChecker
  public func register(dependency: THEOplayerSDK.DependencyChecker.Dependency)
  public func validate(dependency: THEOplayerSDK.DependencyChecker.Dependency)
  @objc deinit
}
@_spi(Core) public typealias AVPictureInPictureSampleBufferInterface = THEOplayerSDK.AVPictureInPictureSampleBufferDelegate & THEOplayerSDK.AVPictureInPictureSampleBufferSource
@_spi(Core) public protocol AVPictureInPictureSampleBufferDelegate : AnyObject {
  @_spi(Core) @available(iOS 15.0, tvOS 14.0, *)
  func scheduledForPictureInPicturePlayback(using pipController: AVKit.AVPictureInPictureController)
  @_spi(Core) func didEnterPictureInPicture()
  @_spi(Core) func didExitPictureInPicture()
}
@_spi(Core) public protocol AVPictureInPictureSampleBufferSource : AnyObject {
  @_spi(Core) var sampleBufferDisplayLayer: AVFoundation.AVSampleBufferDisplayLayer { get }
  @_spi(Core) @available(iOS 15.0, tvOS 15.0, *)
  var playbackDelegate: any AVKit.AVPictureInPictureSampleBufferPlaybackDelegate { get }
}
public protocol THEOError : THEOplayerSDK.THEOBaseError {
  var timestamp: Foundation.Date { get }
  var code: THEOplayerSDK.THEOErrorCode { get }
  var category: THEOplayerSDK.ErrorCategory { get }
  var cause: (any THEOplayerSDK.THEOBaseError)? { get }
}
public protocol THEOBaseError {
  var name: Swift.String { get }
  var message: Swift.String { get }
  var stack: [Swift.String]? { get }
}
public protocol Chromecast : THEOplayerSDK.EventDispatcherProtocol {
  var casting: Swift.Bool { get }
  var error: THEOplayerSDK.CastError? { get }
  var receiverName: Swift.String? { get }
  var state: THEOplayerSDK.PlayerCastState? { get }
  func setConnectionDelegate(_ delegate: (any THEOplayerSDK.ChromecastConnectionDelegate)?)
  func start()
  func stop()
  func join()
  func leave()
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol TextTrackCue : THEOplayerSDK.EventDispatcherProtocol {
  var content: Any? { get }
  var contentString: Swift.String? { get }
  var contentDictionary: [Swift.String : Swift.String]? { get }
  var endTime: Swift.Double { get }
  var id: Swift.String { get }
  var uid: Swift.Int { get }
  var startTime: Swift.Double { get }
  var track: (any THEOplayerSDK.TextTrack)? { get }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol WebVttCue : THEOplayerSDK.TextTrackCue {
  var align: Swift.String { get }
  var line: Swift.String { get }
  var lineAlign: Swift.String { get }
  var position: Swift.String { get }
  var positionAlign: Swift.String { get }
  var region: Swift.String? { get }
  var size: Swift.Int { get }
  var snapToLines: Swift.Bool { get }
  var text: Swift.String? { get }
  var vertical: Swift.String { get }
}
public protocol Id3Cue : THEOplayerSDK.TextTrackCue {
}
public protocol DateRangeCue : THEOplayerSDK.TextTrackCue {
  var attributeClass: Swift.String? { get }
  var startDate: Foundation.Date { get }
  var endDate: Foundation.Date? { get }
  var duration: Swift.Double? { get }
  var plannedDuration: Swift.Double? { get }
  var endOnNext: Swift.Bool { get }
  var scte35Cmd: Foundation.Data? { get }
  var scte35Out: Foundation.Data? { get }
  var scte35In: Foundation.Data? { get }
  var customAttributes: THEOplayerSDK.CustomAttributes { get }
}
public enum ABRStrategyType : Swift.Int {
  case performance
  case quality
  case bandwidth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.ABRStrategyType : Swift.Codable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class ABRMetadata : ObjectiveC.NSObject, Swift.Codable {
  final public let bitrate: Swift.Double?
  public init(bitrate: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class ABRStrategyConfiguration : ObjectiveC.NSObject, Swift.Codable {
  final public let type: THEOplayerSDK.ABRStrategyType
  final public let metadata: THEOplayerSDK.ABRMetadata?
  public init(type: THEOplayerSDK.ABRStrategyType, metadata: THEOplayerSDK.ABRMetadata? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol ABRConfiguration {
  var strategy: THEOplayerSDK.ABRStrategyConfiguration { get set }
  var targetBuffer: Swift.Double { get set }
  var preferredPeakBitRate: Swift.Double { get set }
  var preferredMaximumResolution: CoreFoundation.CGSize { get set }
}
public enum PlayerCastState : Swift.Int {
  case none
  case available
  case connected
  case unavailable
  case connecting
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.PlayerCastState : Swift.Decodable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum PictureInPictureCorner : Swift.Int {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public static var `default`: THEOplayerSDK.PictureInPictureCorner {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_spi(Core) public protocol RemovableEventListenerProtocol {
  @_spi(Core) func remove(from dispatcher: any THEOplayerSDK.EventDispatcherProtocol)
  @_spi(Core) var description: Swift.String { get }
}
@_spi(Core) public struct RemovableEventListener<Event> : THEOplayerSDK.RemovableEventListenerProtocol where Event : THEOplayerSDK.EventProtocol {
  @_spi(Core) public init(type: THEOplayerSDK.EventType<Event>, listener: any THEOplayerSDK.EventListener)
  @_spi(Core) public func remove(from dispatcher: any THEOplayerSDK.EventDispatcherProtocol)
  @_spi(Core) public var description: Swift.String {
    @_spi(Core) get
  }
}
extension THEOplayerSDK.EventDispatcherProtocol {
  @_spi(Core) public func addRemovableEventListener<Event>(type: THEOplayerSDK.EventType<Event>, listener: @escaping (Event) -> Swift.Void) -> THEOplayerSDK.RemovableEventListener<Event> where Event : THEOplayerSDK.EventProtocol
  @_spi(Core) public func remove(eventListener: any THEOplayerSDK.RemovableEventListenerProtocol)
}
public struct ChromecastEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.StateChangeEvent>
  public static var ERROR: THEOplayerSDK.EventType<THEOplayerSDK.CastErrorEvent>
}
@objc public class THEOMargins : ObjectiveC.NSObject {
  final public let top: Swift.Int
  final public let right: Swift.Int
  final public let bottom: Swift.Int
  final public let left: Swift.Int
  public init(top: Swift.Int, right: Swift.Int, bottom: Swift.Int, left: Swift.Int)
  convenience public init(horizontal: Swift.Int, vertical: Swift.Int)
  convenience public init(all: Swift.Int)
  @objc deinit
}
extension Swift.Double {
  @_spi(Core) public func roundTo(decimals: Swift.Int16) -> Swift.Double
  @_spi(Core) public func truncate(to decimals: Swift.Int) -> Swift.Double
}
public protocol ContentProtectionIntegrationFactory : AnyObject {
  func build(configuration: any THEOplayerSDK.DRMConfiguration) -> any THEOplayerSDK.ContentProtectionIntegration
}
@_spi(Core) public protocol ErrorPropagatorDelegate : AnyObject {
  @_spi(Core) func onError(error: any THEOplayerSDK.THEOError)
}
@_spi(Core) public protocol NetworkPropagatorDelegate : AnyObject {
  @_spi(Core) func onNetworkError(error: any THEOplayerSDK.NetworkError)
}
@_spi(Core) public protocol AudioTracksDelegate : AnyObject {
  @_spi(Core) func onAudioTrackAdded(kind: Swift.String, language: Swift.String, label: Swift.String, enabled: Swift.Bool)
  @_spi(Core) func checkSelectionChange(kind: Swift.String, language: Swift.String, label: Swift.String, enabled: Swift.Bool)
}
@_spi(Core) public protocol VideoTracksDelegate : AnyObject {
  @_spi(Core) func onVideoTrackAdded(kind: Swift.String, language: Swift.String, label: Swift.String, enabled: Swift.Bool)
  @_spi(Core) func onVideoTrackActiveQualityBandwidthChange(bandwidth: Swift.Int)
}
@_spi(Core) public class PresentationState {
  @_spi(Core) public var mode: THEOplayerSDK.PresentationMode
  @_spi(Core) public init(mode: THEOplayerSDK.PresentationMode)
  @_spi(Core) @objc deinit
}
@_spi(Core) open class MediaTrackImpl : THEOplayerSDK.MediaTrack {
  @_spi(Core) public var unlocalizedLabel: Swift.String
  @_spi(Core) final public let eventDispatcher: THEOplayerSDK.DefaultEventDispatcher
  @_spi(Core) final public let id: Swift.String
  @_spi(Core) final public let uid: Swift.Int
  @_spi(Core) final public let kind: Swift.String
  @_spi(Core) final public let label: Swift.String
  @_spi(Core) final public let language: Swift.String
  @_spi(Core) public var activeQualityBandwidth: Swift.Int {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var enabled: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public init(kind: Swift.String, label: Swift.String, unlocalizedLabel: Swift.String = "", language: Swift.String, id: Swift.String? = nil)
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.MediaTrackImpl : THEOplayerSDK.EventDispatcherProtocol {
  @_spi(Core) public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  @_spi(Core) public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
@_spi(Core) @_hasMissingDesignatedInitializers public class AVTextTrackStyleController : THEOplayerSDK.TextTrackStyle {
  @_spi(Core) public var backgroundColor: [THEOplayerSDK.TextTrackStyleRuleColor]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var fontColor: [THEOplayerSDK.TextTrackStyleRuleColor]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var fontSize: [THEOplayerSDK.TextTrackStyleRuleNumber]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var fontFamily: [THEOplayerSDK.TextTrackStyleRuleString]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var edgeStyle: [THEOplayerSDK.TextTrackStyleRuleString]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var marginTop: [THEOplayerSDK.TextTrackStyleRuleNumber]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var marginLeft: [THEOplayerSDK.TextTrackStyleRuleNumber]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class THEOplayerConfiguration : ObjectiveC.NSObject, Swift.Encodable {
  final public let hlsDateRange: Swift.Bool?
  final public let license: Swift.String?
  final public let licenseUrl: Swift.String?
  final public let pip: THEOplayerSDK.PiPConfiguration?
  final public let network: THEOplayerSDK.NetworkConfiguration?
  final public let autoIntegrations: Swift.Bool
  public var uid: Swift.Int? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Core) public func getIntegrationConfiguration(forKind kind: THEOplayerSDK.IntegrationKind) -> Any?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class THEOplayerConfigurationBuilder : ObjectiveC.NSObject {
  public var hlsDateRange: Swift.Bool?
  public func setHlsDateRange(_ hlsDateRange: Swift.Bool)
  public var license: Swift.String?
  public var licenseUrl: Swift.String?
  public var pip: THEOplayerSDK.PiPConfiguration?
  public var network: THEOplayerSDK.NetworkConfiguration?
  public var autoIntegrations: Swift.Bool
  public func build() -> THEOplayerSDK.THEOplayerConfiguration
  @_spi(Core) public func addIntegrationConfiguration(forKind kind: THEOplayerSDK.IntegrationKind, configuration: Any)
  @objc override dynamic public init()
  @objc deinit
}
@_spi(Core) public protocol AdsIntegration : THEOplayerSDK.Integration {
  @_spi(Core) var eventDispatcher: any THEOplayerSDK.EventDispatcher { get }
  @_spi(Core) var playing: Swift.Bool { get }
  @_spi(Core) var currentAds: [any THEOplayerSDK.Ad] { get }
  @_spi(Core) var currentAdBreak: (any THEOplayerSDK.AdBreak)? { get }
  @_spi(Core) var scheduledAds: [any THEOplayerSDK.Ad] { get }
  @_spi(Core) var scheduledAdBreaks: [any THEOplayerSDK.AdBreak] { get }
  @_spi(Core) func schedule(adDescription: any THEOplayerSDK.AdDescription)
  @_spi(Core) func skip()
}
@objc public class TimeRange : ObjectiveC.NSObject, Swift.Codable {
  final public let start: Swift.Double
  final public let end: Swift.Double
  public init(start: Swift.Double, end: Swift.Double)
  public static func == (lhs: THEOplayerSDK.TimeRange, rhs: THEOplayerSDK.TimeRange) -> Swift.Bool
  public func contains(_ time: Swift.Double) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension THEOplayerSDK.TimeRange {
  @_spi(Core) public static func fromCMTimeRange(_ cmTimeRange: CoreMedia.CMTimeRange) -> THEOplayerSDK.TimeRange
}
@objc public class CastConfiguration : ObjectiveC.NSObject, Swift.Encodable {
  final public let strategy: THEOplayerSDK.CastStrategy?
  public init(strategy: THEOplayerSDK.CastStrategy?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum CastStrategy : Swift.Int {
  case auto
  case manual
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension THEOplayerSDK.CastStrategy : Swift.Encodable {
  public var _rawValue: Swift.String {
    get
    set
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct FullscreenEventTypes {
}
public protocol Cast : THEOplayerSDK.EventDispatcherProtocol {
  var casting: Swift.Bool { get }
  var chromecast: (any THEOplayerSDK.Chromecast)? { get }
  var airPlay: (any THEOplayerSDK.AirPlay)? { get }
}
@_spi(Core) @objc @_hasMissingDesignatedInitializers public class PictureInPictureControllerNative : ObjectiveC.NSObject, THEOplayerSDK.PictureInPicture {
  @_spi(Core) public var currentCorner: THEOplayerSDK.PictureInPictureCorner? {
    @_spi(Core) get
  }
  @_spi(Core) @available(iOS 14, tvOS 14.0, *)
  public var nativePictureInPictureDelegate: (any AVKit.AVPictureInPictureControllerDelegate)? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public func configure(configuration: THEOplayerSDK.PiPConfiguration)
  @_spi(Core) public func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?, visibility: Swift.Double? = nil, margin: THEOplayerSDK.THEOMargins? = nil)
  @_spi(Core) public func configure(movable: Swift.Bool, defaultCorner: THEOplayerSDK.PictureInPictureCorner, scale: Swift.Float)
  @_spi(Core) public func configure(movable: Swift.Bool, defaultCorner: THEOplayerSDK.PictureInPictureCorner, scale: Swift.Float, visibility: Foundation.NSNumber?)
  @_spi(Core) public func configure(movable: Swift.Bool, defaultCorner: THEOplayerSDK.PictureInPictureCorner, scale: Swift.Float, margin: THEOplayerSDK.THEOMargins)
  @_spi(Core) @objc deinit
}
@_spi(Core) public protocol InternalContentPlayerIntegration : THEOplayerSDK.InternalIntegration {
  @_spi(Core) var textTracks: (any THEOplayerSDK.TextTrackList)? { get }
  @_spi(Core) var audioTracks: THEOplayerSDK.AudioTrackListImpl? { get }
  @_spi(Core) var videoTracks: THEOplayerSDK.VideoTrackListImpl? { get }
  @_spi(Core) func getSeekableRange() -> [THEOplayerSDK.TimeRange]?
  @_spi(Core) func setPlaybackRate(_ playbackRate: Swift.Double) -> Swift.Bool
  @_spi(Core) func getProgramDateTime() -> Foundation.Date?
  @_spi(Core) func getVideoWidth() -> Swift.Int?
  @_spi(Core) func getVideoHeight() -> Swift.Int?
  @_spi(Core) func isEnded() -> Swift.Bool?
}
extension Foundation.NSNotification.Name {
  public static let PictureInPictureMoved: Foundation.Notification.Name
}
public let PictureInPictureOldCornerUserInfoKey: Swift.String
public let PictureInPictureNewCornerUserInfoKey: Swift.String
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class VimondDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public init(keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_spi(Core) @_hasMissingDesignatedInitializers public class DeviceUtil {
  @_spi(Core) public static let shared: THEOplayerSDK.DeviceUtil
  @_spi(Core) public var DEVICE_MANUFACTURER: Swift.String {
    @_spi(Core) get
  }
  @_spi(Core) public var DEVICE_OS: Swift.String {
    @_spi(Core) get
  }
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.DeviceUtil {
  @_spi(Core) public struct OS {
    @_spi(Core) public static let iOS: Swift.String
    @_spi(Core) public static let tvOS: Swift.String
  }
}
@_spi(Core) extension Foundation.JSONEncoder {
  @_spi(Core) public func encodeWithReplacingBackslashes<T>(_ value: T) throws -> Swift.String where T : Swift.Encodable
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class AxinomDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public var token: Swift.String
  public init(token: Swift.String, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class GoogleDAIConfiguration : ObjectiveC.NSObject, THEOplayerSDK.ServerSideAdInsertionConfiguration, Swift.Codable {
  public var integration: THEOplayerSDK.SSAIIntegrationId
  public var availabilityType: THEOplayerSDK.StreamType
  public var apiKey: Swift.String
  public var authToken: Swift.String?
  public var streamActivityMonitorID: Swift.String?
  public var adTagParameters: [Swift.String : Swift.String]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc open class TextTrackDescription : ObjectiveC.NSObject, Swift.Codable {
  public var isDefault: Swift.Bool?
  public var kind: THEOplayerSDK.TextTrackKind?
  public var src: Foundation.URL
  public var srclang: Swift.String
  public var label: Swift.String?
  public var format: THEOplayerSDK.TextTrackFormat?
  public init(src: Swift.String, srclang: Swift.String, isDefault: Swift.Bool? = nil, kind: THEOplayerSDK.TextTrackKind? = nil, label: Swift.String? = nil, format: THEOplayerSDK.TextTrackFormat? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol Track : AnyObject, THEOplayerSDK.EventDispatcherProtocol {
  var kind: Swift.String { get }
  var language: Swift.String { get }
  var label: Swift.String { get }
  var unlocalizedLabel: Swift.String { get }
  var id: Swift.String { get }
  @available(*, deprecated, message: "This property will be removed in future versions, please use '===' instead.")
  var uid: Swift.Int { get }
}
public protocol InternalIntegrationActivationDelegate : AnyObject {
  func onIntegrationActivated(_ integration: any THEOplayerSDK.InternalIntegration)
  func onIntegrationDidDeactivate(_ integration: any THEOplayerSDK.InternalIntegration)
  func onIntegrationWillDeactivate(_ integration: any THEOplayerSDK.InternalIntegration)
}
public protocol InternalIntegration : THEOplayerSDK.Integration {
  var activationDelegate: (any THEOplayerSDK.InternalIntegrationActivationDelegate)? { get set }
  func setup()
  func verifyIntegrationIsSetup() -> Swift.Bool
  func setSource(source: THEOplayerSDK.SourceDescription?) -> Swift.Bool
  func getSource() -> THEOplayerSDK.SourceDescription?
  func play() -> Swift.Bool
  func pause() -> Swift.Bool
  func isPaused() -> Swift.Bool?
  func setPresentationMode(mode: THEOplayerSDK.PresentationMode) -> Swift.Bool
  func setCurrentTime(currentTime: Swift.Double) -> Swift.Bool
  func getCurrentTime() -> Swift.Double?
  func getDuration() -> Swift.Double?
  func setVolume(volume: Swift.Double)
  func getVolume() -> Swift.Double?
  func setMuted(muted: Swift.Bool)
  func isMuted() -> Swift.Bool?
  func reset()
  func destroy()
}
@_spi(Core) public protocol IntegrationPresentationModeInterface {
  @_spi(Core) func canGoIntoPip() -> Swift.Bool
}
extension THEOplayerSDK.THEOplayer {
  public var textTrackStyle: (any THEOplayerSDK.TextTrackStyle)? {
    get
    set
  }
}
public enum OmidFriendlyObstructionPurpose : Swift.Int {
  case closeAd
  case mediaControls
  case notVisible
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct NetworkEventTypes {
  public static var ERROR: THEOplayerSDK.EventType<THEOplayerSDK.NetworkErrorEvent>
  public static var ENTER_BADNETWORKMODE: THEOplayerSDK.EventType<THEOplayerSDK.EnterBadNetworkModeEvent>
  public static var EXIT_BADNETWORKMODE: THEOplayerSDK.EventType<THEOplayerSDK.ExitBadNetworkModeEvent>
}
@_spi(Core) @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PlayerViewController : UIKit.UIViewController {
  @_spi(Core) @_Concurrency.MainActor(unsafe) public var playerView: THEOplayerSDK.PlayerView
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(Core) @objc deinit
}
@_spi(Core) public enum PlayerViewLayout {
  @_spi(Core) case single
  @_spi(Core) case doubleBox
  @_spi(Core) case lShape
  @_spi(Core) public static func == (a: THEOplayerSDK.PlayerViewLayout, b: THEOplayerSDK.PlayerViewLayout) -> Swift.Bool
  @_spi(Core) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Core) public var hashValue: Swift.Int {
    @_spi(Core) get
  }
}
@_spi(Core) public protocol PlayerViewDelegate : AnyObject {
  @_spi(Core) func didMoveToSuperview(superview: UIKit.UIView?)
  @_spi(Core) func didUpdateFrame(frame: CoreFoundation.CGRect)
}
@_spi(Core) extension THEOplayerSDK.PlayerViewDelegate {
  @_spi(Core) public func didMoveToSuperview(superview: UIKit.UIView?)
  @_spi(Core) public func didUpdateFrame(frame: CoreFoundation.CGRect)
}
@_spi(Core) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PlayerView : UIKit.UIView {
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreFoundation.CGRect {
    @_spi(Core) @objc get
    @_spi(Core) @objc set
  }
  @_spi(Core) @_Concurrency.MainActor(unsafe) public var layout: THEOplayerSDK.PlayerViewLayout {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_spi(Core) @_Concurrency.MainActor(unsafe) public func setBackgroundImage(_ url: Foundation.URL?)
  @_spi(Core) @_Concurrency.MainActor(unsafe) public func addDelegate(_ delegate: any THEOplayerSDK.PlayerViewDelegate)
  @_spi(Core) @_Concurrency.MainActor(unsafe) public func removeDelegate(_ delegate: any THEOplayerSDK.PlayerViewDelegate)
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_spi(Core) @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToSuperview()
  @_spi(Core) @_Concurrency.MainActor(unsafe) public func addContentPlayerView(contentPlayerView: UIKit.UIView)
  @_spi(Core) @objc deinit
}
@objc public class THEOplayer : ObjectiveC.NSObject, THEOplayerSDK.EventDispatcherProtocol {
  @_spi(Core) public var theoplayer: any THEOplayerSDK.THEOplayerInternalInterface
  public var isDestroyed: Swift.Bool {
    get
  }
  public var backgroundPlaybackDelegate: (any THEOplayerSDK.BackgroundPlaybackDelegate)? {
    get
    set
  }
  public init(with frame: CoreFoundation.CGRect? = nil, configuration: THEOplayerSDK.THEOplayerConfiguration? = nil)
  public static var version: Swift.String {
    get
  }
  public var frame: CoreFoundation.CGRect {
    get
    set
  }
  public var bounds: CoreFoundation.CGRect {
    get
    set
  }
  public var center: CoreFoundation.CGPoint {
    get
    set
  }
  public var autoresizingMask: UIKit.UIView.AutoresizingMask {
    get
    set
  }
  public var videoHeight: Swift.Int {
    get
  }
  public var videoWidth: Swift.Int {
    get
  }
  @objc dynamic public var videoRect: CoreFoundation.CGRect {
    get
  }
  public var resizeTransitionEnabled: Swift.Bool {
    get
    set
  }
  public var abr: any THEOplayerSDK.ABRConfiguration {
    get
    set
  }
  public var aspectRatio: THEOplayerSDK.AspectRatio {
    get
    set
  }
  public var network: any THEOplayerSDK.Network {
    get
  }
  public var textTracks: any THEOplayerSDK.TextTrackList {
    get
  }
  public var audioTracks: any THEOplayerSDK.AudioTrackList {
    get
  }
  public var videoTracks: any THEOplayerSDK.VideoTrackList {
    get
  }
  public var duration: Swift.Double? {
    get
  }
  public var autoplay: Swift.Bool {
    get
    set
  }
  public var source: THEOplayerSDK.SourceDescription? {
    get
    set
  }
  public var src: Swift.String? {
    get
  }
  public var volume: Swift.Float {
    get
    set
  }
  public var muted: Swift.Bool {
    get
    set
  }
  public var seeking: Swift.Bool {
    get
  }
  public var paused: Swift.Bool {
    get
  }
  public var ended: Swift.Bool {
    get
  }
  public var preventsDisplaySleepDuringVideoPlayback: Swift.Bool {
    get
    set
  }
  public var allowsExternalPlayback: Swift.Bool {
    get
    set
  }
  public var preload: THEOplayerSDK.Preload {
    get
    set
  }
  public var playbackRate: Swift.Double {
    get
    set
  }
  public var buffered: [THEOplayerSDK.TimeRange] {
    get
  }
  public var played: [THEOplayerSDK.TimeRange] {
    get
  }
  public var seekable: [THEOplayerSDK.TimeRange] {
    get
  }
  public var metrics: Any? {
    get
  }
  public var presentationMode: THEOplayerSDK.PresentationMode {
    get
    set
  }
  public var readyState: THEOplayerSDK.ReadyState {
    get
  }
  public var error: Swift.String? {
    get
  }
  public var uid: Swift.Int {
    get
  }
  public var currentTime: Swift.Double {
    get
    set
  }
  public var currentProgramDateTime: Foundation.Date? {
    get
  }
  public static var automaticallyManageAudioSession: Swift.Bool {
    get
    set
  }
  public func play()
  public func pause()
  public func stop(completionHandler: ((Swift.Bool?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  public func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public func addAsSubview(of view: UIKit.UIView)
  public func insertAsSubview(of view: UIKit.UIView, at: Swift.Int)
  public func insertAsSubview(of view: UIKit.UIView, belowSubview siblingSubview: UIKit.UIView)
  public func insertAsSubview(of view: UIKit.UIView, aboveSubview siblingSubview: UIKit.UIView)
  public func isContained(in views: [UIKit.UIView]) -> Swift.Bool
  public static func registerContentProtectionIntegration(integrationId: Swift.String, keySystem: THEOplayerSDK.KeySystemId, integrationFactory: any THEOplayerSDK.ContentProtectionIntegrationFactory)
  @available(*, deprecated, message: "This method will be removed in future versions, instead remove the reference to the player: `self.player = nil`.")
  public func destroy()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AirPlayEvent : ObjectiveC.NSObject, THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AirPlayStateChangeEvent : THEOplayerSDK.AirPlayEvent {
  final public let state: THEOplayerSDK.PlayerCastState?
  @objc deinit
}
public protocol CompanionAd {
  var adSlotId: Swift.String? { get }
  var altText: Swift.String? { get }
  var clickThrough: Swift.String? { get }
  var height: Swift.Int { get }
  var resourceURI: Swift.String? { get }
  var width: Swift.Int { get }
  var type: Swift.String { get }
}
extension THEOplayerSDK.THEOplayer {
  public var cast: (any THEOplayerSDK.Cast)? {
    get
  }
}
@_spi(Core) @objc open class ContentPlayerNative : ObjectiveC.NSObject, THEOplayerSDK.ContentPlayer, THEOplayerSDK.ContentPlayerView {
  @_spi(Core) final public let id: Foundation.UUID
  @_spi(Core) open var audioTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl> & THEOplayerSDK.AudioTrackList {
    @_spi(Core) get
  }
  @_spi(Core) open var videoTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl> & THEOplayerSDK.VideoTrackList {
    @_spi(Core) get
  }
  @_spi(Core) open var textTracks: any THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList {
    @_spi(Core) get
  }
  @_spi(Core) final public let eventDispatcher: any THEOplayerSDK.EventDispatcher
  @_spi(Core) open var view: UIKit.UIView {
    @_spi(Core) get
  }
  @_spi(Core) open var buffered: [THEOplayerSDK.TimeRange]? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var played: [THEOplayerSDK.TimeRange]?
  @_spi(Core) open var seekable: [THEOplayerSDK.TimeRange]?
  @_spi(Core) public var metrics: Any?
  @_spi(Core) open var seeking: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var paused: Swift.Bool? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var waiting: Swift.Bool? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var duration: Swift.Double? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var ended: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var readyState: THEOplayerSDK.ReadyState {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var playbackRate: Swift.Double {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var selectedTypedSource: THEOplayerSDK.TypedSource? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var preload: THEOplayerSDK.Preload
  @_spi(Core) public var autoplay: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var exposeHLSDateRanges: Swift.Bool
  @_spi(Core) public var networkConfiguration: THEOplayerSDK.NetworkConfiguration?
  @_spi(Core) open var source: THEOplayerSDK.SourceDescription? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var aspectRatio: THEOplayerSDK.AspectRatio {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) weak open var errorPropagatorDelegate: (any THEOplayerSDK.ErrorPropagatorDelegate)?
  @_spi(Core) weak open var networkPropagatorDelegate: (any THEOplayerSDK.NetworkPropagatorDelegate)?
  @_spi(Core) public init(properties: THEOplayerSDK.ContentPlayerProperties)
  @_spi(Core) open var currentTime: Swift.Double? {
    @_spi(Core) get
  }
  @_spi(Core) open var videoHeight: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) open var videoWidth: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) open var videoRect: CoreFoundation.CGRect? {
    @_spi(Core) get
  }
  @_spi(Core) open var currentProgramDateTime: Foundation.Date? {
    @_spi(Core) get
  }
  @_spi(Core) open var textTrackStyle: (any THEOplayerSDK.TextTrackStyle)? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var volume: Swift.Float {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var muted: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var preventsDisplaySleepDuringVideoPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var allowsExternalPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var abr: any THEOplayerSDK.ABRConfiguration {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open func sourceUpdated(source: THEOplayerSDK.SourceDescription)
  @_spi(Core) open func presentationModeChanged(presentationMode: THEOplayerSDK.PresentationMode)
  @_spi(Core) open func fullscreenAspectRatioUpdated(aspectRatio: THEOplayerSDK.AspectRatio)
  @_spi(Core) open func textTrackEnable(type: THEOplayerSDK.TextTrackType, label: Swift.String, hidden: Swift.Bool)
  @_spi(Core) open func textTrackDisable(type: THEOplayerSDK.TextTrackType)
  @_spi(Core) open func audioTrackEnabled(label: Swift.String)
  @_spi(Core) open func audioTrackDisabled()
  @_spi(Core) open func videoTrackEnabled(label: Swift.String)
  @_spi(Core) open func videoTrackDisabled()
  @_spi(Core) open func play()
  @_spi(Core) open func pause()
  @_spi(Core) open func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) open func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) open func enterBackground(continuePlayback: Swift.Bool)
  @_spi(Core) open func exitBackground()
  @_spi(Core) open func resetContentPlayerState()
  @_spi(Core) open func destroyContentPlayer()
  @_spi(Core) open func startAirplay()
  @_spi(Core) open func stopAirplay()
  @_spi(Core) open func isAirplaySupported() -> Swift.Bool
  @_spi(Core) open func initVideoRectObserver(delegateObject: ObjectiveC.NSObject, delegateKeyPath: Swift.String) -> THEOplayerSDK.ChainObserver<CoreFoundation.CGRect>
  @_spi(Core) open func addIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) open func removeIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) public func didSetPaused(newValue: Swift.Bool?, currentTime: Swift.Double?)
  @_spi(Core) public func didSetSource(source: THEOplayerSDK.SourceDescription?)
  @_spi(Core) open func setSource(_ newValue: THEOplayerSDK.SourceDescription?)
  @_spi(Core) open func stop()
  @_spi(Core) public func reset()
  @_spi(Core) public func destroy()
  @_spi(Core) @objc deinit
  @_spi(Core) public typealias ID = Foundation.UUID
}
@_spi(Core) open class ContentPlayerProperties {
  @_spi(Core) final public let presentationState: THEOplayerSDK.PresentationState
  @_spi(Core) public var selectedTypedSource: THEOplayerSDK.TypedSource?
  @_spi(Core) public init(presentationState: THEOplayerSDK.PresentationState, selectedTypedSource: THEOplayerSDK.TypedSource? = nil)
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.ContentPlayerNative : THEOplayerSDK.MediaTrackListDelegate {
  @_spi(Core) public func onTrackListTrackEnabled(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) public func onTrackListTrackDisabled(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) public func onAddTrack(_ track: any THEOplayerSDK.MediaTrack)
  @_spi(Core) public func onRemoveTrack(_ track: any THEOplayerSDK.MediaTrack)
}
@_spi(Core) extension THEOplayerSDK.ContentPlayerNative : THEOplayerSDK.TextTrackListContentPlayerDelegate {
  @_spi(Core) public func onTextTrackEnabled(type: THEOplayerSDK.TextTrackType, trackLabel: Swift.String, hidden: Swift.Bool)
  @_spi(Core) public func onTextTrackDisabled(type: THEOplayerSDK.TextTrackType)
}
public protocol ContentProtectionError : THEOplayerSDK.THEOError {
  var url: Swift.String? { get }
  var status: Swift.Int? { get }
  var statusText: Swift.String? { get }
  var response: Swift.String? { get }
  var systemCode: Swift.Int? { get }
}
@objc public class WidevineDRMConfiguration : ObjectiveC.NSObject, THEOplayerSDK.WidevineDRMConfigurationProtocol {
  public var widevine: THEOplayerSDK.KeySystemConfiguration
  public var integration: THEOplayerSDK.DRMIntegration?
  public var headers: [[Swift.String : Swift.String]]?
  public var integrationParameters: Swift.Dictionary<Swift.String, Any>?
  public var customIntegrationId: Swift.String?
  public init(licenseAcquisitionURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  public init(customIntegrationId: Swift.String, licenseAcquisitionURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil, integrationParameters: Swift.Dictionary<Swift.String, Any>? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ChromeCastEvent : ObjectiveC.NSObject, THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class StateChangeEvent : THEOplayerSDK.ChromeCastEvent {
  final public let state: THEOplayerSDK.PlayerCastState
  public init(state: THEOplayerSDK.PlayerCastState, date: Foundation.Date)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CastErrorEvent : THEOplayerSDK.ChromeCastEvent {
  final public let error: THEOplayerSDK.CastError
  public init(error: THEOplayerSDK.CastError, date: Foundation.Date)
  @objc deinit
}
@_spi(Core) @objc @_hasMissingDesignatedInitializers public class TextTrackImplNative : ObjectiveC.NSObject, THEOplayerSDK.TextTrack {
  @_spi(Core) public var unlocalizedLabel: Swift.String
  @_spi(Core) final public let kind: Swift.String
  @_spi(Core) final public let language: Swift.String
  @_spi(Core) final public let label: Swift.String
  @_spi(Core) final public let id: Swift.String
  @_spi(Core) final public let uid: Swift.Int
  @_spi(Core) final public let inBandMetadataTrackDispatchType: Swift.String
  @_spi(Core) final public let type: Swift.String
  @_spi(Core) final public let src: Swift.String
  @_spi(Core) final public let forced: Swift.Bool
  @_spi(Core) public var mode: THEOplayerSDK.TextTrackMode {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public var cues: [any THEOplayerSDK.TextTrackCue] {
    @_spi(Core) get
  }
  @_spi(Core) public var activeCues: [any THEOplayerSDK.TextTrackCue] {
    @_spi(Core) get
  }
  @_spi(Core) @objc deinit
}
@_spi(Core) extension THEOplayerSDK.TextTrackImplNative : THEOplayerSDK.EventDispatcherProtocol {
  @_spi(Core) public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  @_spi(Core) public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
@_spi(Core) public enum TextTrackType : Swift.String {
  @_spi(Core) case defaultType
  @_spi(Core) case daterange
  @_spi(Core) case id3
  @_spi(Core) public init?(rawValue: Swift.String)
  @_spi(Core) public typealias RawValue = Swift.String
  @_spi(Core) public var rawValue: Swift.String {
    @_spi(Core) get
  }
}
public protocol TrackEventProtocol : THEOplayerSDK.EventProtocol {
  var track: any THEOplayerSDK.Track { get }
}
@objc public class TrackChangeEvent : ObjectiveC.NSObject, THEOplayerSDK.TrackEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let track: any THEOplayerSDK.Track
  public init(date: Foundation.Date, track: any THEOplayerSDK.Track)
  @objc deinit
}
@objc public class AddTrackEvent : ObjectiveC.NSObject, THEOplayerSDK.TrackEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let track: any THEOplayerSDK.Track
  public init(date: Foundation.Date, track: any THEOplayerSDK.Track)
  @objc deinit
}
@objc public class RemoveTrackEvent : ObjectiveC.NSObject, THEOplayerSDK.TrackEventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  final public let track: any THEOplayerSDK.Track
  public init(date: Foundation.Date, track: any THEOplayerSDK.Track)
  @objc deinit
}
@_spi(Core) open class ForwardingContentPlayer : THEOplayerSDK.ContentPlayer {
  @_spi(Core) @objc final public let id: Foundation.UUID
  @_spi(Core) final public let eventDispatcher: any THEOplayerSDK.EventDispatcher
  @_spi(Core) public var player: any THEOplayerSDK.ContentPlayer
  @_spi(Core) public init(player: any THEOplayerSDK.ContentPlayer, forwardEvents: Swift.Bool = true)
  @_spi(Core) open var aspectRatio: THEOplayerSDK.AspectRatio {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var preload: THEOplayerSDK.Preload {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var autoplay: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var source: THEOplayerSDK.SourceDescription? {
    @_spi(Core) get
  }
  @_spi(Core) open var currentTime: Swift.Double? {
    @_spi(Core) get
  }
  @_spi(Core) open var currentProgramDateTime: Foundation.Date? {
    @_spi(Core) get
  }
  @_spi(Core) open var duration: Swift.Double? {
    @_spi(Core) get
  }
  @_spi(Core) open var playbackRate: Swift.Double {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var volume: Swift.Float {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var muted: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var preventsDisplaySleepDuringVideoPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var allowsExternalPlayback: Swift.Bool {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var audioTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl> & THEOplayerSDK.AudioTrackList {
    @_spi(Core) get
  }
  @_spi(Core) open var videoTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl> & THEOplayerSDK.VideoTrackList {
    @_spi(Core) get
  }
  @_spi(Core) open var textTracks: any THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList {
    @_spi(Core) get
  }
  @_spi(Core) open var seeking: Swift.Bool {
    @_spi(Core) get
  }
  @_spi(Core) open var paused: Swift.Bool? {
    @_spi(Core) get
  }
  @_spi(Core) open var ended: Swift.Bool {
    @_spi(Core) get
  }
  @_spi(Core) open var readyState: THEOplayerSDK.ReadyState {
    @_spi(Core) get
  }
  @_spi(Core) open var buffered: [THEOplayerSDK.TimeRange]? {
    @_spi(Core) get
  }
  @_spi(Core) open var played: [THEOplayerSDK.TimeRange]? {
    @_spi(Core) get
  }
  @_spi(Core) open var seekable: [THEOplayerSDK.TimeRange]? {
    @_spi(Core) get
  }
  @_spi(Core) open var videoHeight: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) open var videoWidth: Swift.Int? {
    @_spi(Core) get
  }
  @_spi(Core) open var abr: any THEOplayerSDK.ABRConfiguration {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open var textTrackStyle: (any THEOplayerSDK.TextTrackStyle)? {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) open func play()
  @_spi(Core) open func pause()
  @_spi(Core) open func stop()
  @_spi(Core) open func setSource(_ newValue: THEOplayerSDK.SourceDescription?)
  @_spi(Core) open func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) open func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) open func resetContentPlayerState()
  @_spi(Core) open func detach()
  @_spi(Core) open func addIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) open func removeIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) open func startAirplay()
  @_spi(Core) open func stopAirplay()
  @_spi(Core) open func isAirplaySupported() -> Swift.Bool
  @_spi(Core) open func enterBackground(continuePlayback: Swift.Bool)
  @_spi(Core) open func exitBackground()
  @_spi(Core) @objc deinit
  @_spi(Core) public typealias ID = Foundation.UUID
}
extension AVFoundation.AVPlayerItem {
  #if compiler(>=5.3) && $AsyncAwait
  @_spi(Core) public func asyncSeek(to time: CoreMedia.CMTime) async throws
  #endif
}
extension Swift.Array {
  @_spi(Core) public func binarySearchInsertIndex(element: Element, comparator: (Element, Element) -> Swift.Int) throws -> Swift.Int
  @_spi(Core) public func getOrNil(_ index: Swift.Int) -> Element?
  @_spi(Core) public func partition(predicate: (Element) -> Swift.Bool) -> ([Element], [Element])
}
extension Swift.Array where Element : Swift.Numeric {
  @_spi(Core) public func sum() -> Element
}
extension Swift.Array where Element : Swift.Encodable {
  @_spi(Core) public func toBase64() -> Swift.String?
}
extension Swift.Sequence where Self.Element : Swift.Hashable {
  @_spi(Core) public func distinct() -> [Self.Element]
}
extension Swift.Sequence {
  @_spi(Core) public func distinct<Subject>(by projection: (Self.Element) throws -> Subject) rethrows -> [Self.Element] where Subject : Swift.Hashable
}
extension Swift.Array {
  @_spi(Core) public func randomWeightedElement(by projection: (Element) -> Swift.Double) -> Element?
}
extension Swift.Array where Element : Swift.Equatable {
  @_spi(Core) public mutating func remove(_ element: Element)
}
@_spi(Core) public class WeakArray<T> : Swift.Sequence {
  @_spi(Core) public typealias SubSequence = THEOplayerSDK.WeakArray<T>
  @_spi(Core) public typealias Element = Swift.Optional<T>
  @_spi(Core) public typealias Index = Swift.Int
  @_spi(Core) public var startIndex: THEOplayerSDK.WeakArray<T>.Index {
    @_spi(Core) get
  }
  @_spi(Core) public var endIndex: THEOplayerSDK.WeakArray<T>.Index {
    @_spi(Core) get
  }
  @_spi(Core) public func index(after i: THEOplayerSDK.WeakArray<T>.Index) -> THEOplayerSDK.WeakArray<T>.Index
  @_spi(Core) public func append(_ newElement: T)
  @_spi(Core) public func removeAll(where shouldBeRemoved: (T) -> Swift.Bool)
  @_spi(Core) public subscript(position: THEOplayerSDK.WeakArray<T>.Index) -> THEOplayerSDK.WeakArray<T>.Element {
    @_spi(Core) get
    @_spi(Core) set(newValue)
  }
  @_spi(Core) public var count: Swift.Int {
    @_spi(Core) get
  }
  @_spi(Core) public var isEmpty: Swift.Bool {
    @_spi(Core) get
  }
  @_spi(Core) public struct WeakArrayIterator : Swift.IteratorProtocol {
    @_spi(Core) public mutating func next() -> THEOplayerSDK.WeakArray<T>.Element?
    @_spi(Core) public typealias Element = THEOplayerSDK.WeakArray<T>.Element
  }
  @_spi(Core) public func makeIterator() -> THEOplayerSDK.WeakArray<T>.WeakArrayIterator
  @_spi(Core) public init()
  @_spi(Core) public typealias Iterator = THEOplayerSDK.WeakArray<T>.WeakArrayIterator
  @_spi(Core) @objc deinit
}
@_spi(Core) public protocol TextTrackListContentPlayerDelegate : AnyObject {
  @_spi(Core) func onTextTrackEnabled(type: THEOplayerSDK.TextTrackType, trackLabel: Swift.String, hidden: Swift.Bool)
  @_spi(Core) func onTextTrackDisabled(type: THEOplayerSDK.TextTrackType)
}
@_spi(Core) public protocol TextTrackListRouterDelegate : AnyObject {
  @_spi(Core) func onAddTrack(_ track: any THEOplayerSDK.TextTrack)
  @_spi(Core) func onRemoveTrack(_ track: any THEOplayerSDK.TextTrack)
  @_spi(Core) func onTextTrackChange(_ track: any THEOplayerSDK.TextTrack)
}
@_spi(Core) public typealias ITextTrackList = THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList
@_spi(Core) @_hasMissingDesignatedInitializers public class TextTrackListImplNative : THEOplayerSDK.TextTrackList, Swift.Sequence {
  @_spi(Core) public var ignoreUserPreferences: Swift.Bool
  @_spi(Core) public var notifyMetadataInAdvanceInterval: Foundation.TimeInterval
  @_spi(Core) public var count: Swift.Int {
    @_spi(Core) get
  }
  @_spi(Core) public func get(_ index: Swift.Int) -> any THEOplayerSDK.TextTrack
  @_spi(Core) public subscript(index: Swift.Int) -> any THEOplayerSDK.TextTrack {
    @_spi(Core) get
    @_spi(Core) set
  }
  @_spi(Core) public func addContentPlayerDelegate(_ delegate: any THEOplayerSDK.TextTrackListContentPlayerDelegate)
  @_spi(Core) public func removeContentPlayerDelegate(_ delegate: any THEOplayerSDK.TextTrackListContentPlayerDelegate)
  @_spi(Core) public func addRouterDelegate(_ delegate: any THEOplayerSDK.TextTrackListRouterDelegate)
  @_spi(Core) public func removeRouterDelegate(_ delegate: any THEOplayerSDK.TextTrackListRouterDelegate)
  @_spi(Core) public func addTrack(_ track: THEOplayerSDK.TextTrackImplNative)
  @_spi(Core) public func removeTrack(_ track: THEOplayerSDK.TextTrackImplNative)
  @_spi(Core) public func activeTextTrackSnapshot() -> THEOplayerSDK.TextTrackSnapshot?
  @_spi(Core) public func activateTextTrackSnapshot(_ snapshot: THEOplayerSDK.TextTrackSnapshot)
  @_spi(Core) public func makeIterator() -> Swift.Array<THEOplayerSDK.TextTrackImplNative>.Iterator
  @_spi(Core) public func reset()
  @_spi(Core) public typealias Element = Swift.IndexingIterator<Swift.Array<THEOplayerSDK.TextTrackImplNative>>.Element
  @_spi(Core) public typealias Iterator = Swift.Array<THEOplayerSDK.TextTrackImplNative>.Iterator
  @_spi(Core) @objc deinit
}
@_spi(Core) public struct TextTrackSnapshot {
  @_spi(Core) public struct IdentifyingProperties : Swift.Hashable {
    @_spi(Core) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Core) public static func == (a: THEOplayerSDK.TextTrackSnapshot.IdentifyingProperties, b: THEOplayerSDK.TextTrackSnapshot.IdentifyingProperties) -> Swift.Bool
    @_spi(Core) public var hashValue: Swift.Int {
      @_spi(Core) get
    }
  }
}
@_spi(Core) extension THEOplayerSDK.TextTrackListImplNative : THEOplayerSDK.EventDispatcherProtocol {
  @_spi(Core) public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> any THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  @_spi(Core) public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: any THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
@_spi(Core) public class DummyContentPlayer : THEOplayerSDK.ContentPlayer {
  @_spi(Core) final public let audioTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.AudioTrackImpl> & THEOplayerSDK.AudioTrackList
  @_spi(Core) final public let videoTracks: any THEOplayerSDK.MediaTrackListImpl<THEOplayerSDK.VideoTrackImpl> & THEOplayerSDK.VideoTrackList
  @_spi(Core) final public let textTracks: any THEOplayerSDK.TextTrackListImplNative & THEOplayerSDK.TextTrackList
  @_spi(Core) final public let id: Foundation.UUID
  @_spi(Core) final public let eventDispatcher: any THEOplayerSDK.EventDispatcher
  @_spi(Core) public var targetBuffer: Swift.Double?
  @_spi(Core) public var preferredPeakBitRate: Swift.Double?
  @_spi(Core) public var preferredMaximumResolution: CoreFoundation.CGSize?
  @_spi(Core) public var aspectRatio: THEOplayerSDK.AspectRatio
  @_spi(Core) public var preload: THEOplayerSDK.Preload
  @_spi(Core) public var autoplay: Swift.Bool
  @_spi(Core) public var source: THEOplayerSDK.SourceDescription?
  @_spi(Core) public var currentTime: Swift.Double?
  @_spi(Core) public var currentProgramDateTime: Foundation.Date?
  @_spi(Core) public var duration: Swift.Double?
  @_spi(Core) public var playbackRate: Swift.Double
  @_spi(Core) public var volume: Swift.Float
  @_spi(Core) public var muted: Swift.Bool
  @_spi(Core) public var preventsDisplaySleepDuringVideoPlayback: Swift.Bool
  @_spi(Core) public var allowsExternalPlayback: Swift.Bool
  @_spi(Core) public var seeking: Swift.Bool
  @_spi(Core) public var paused: Swift.Bool?
  @_spi(Core) public var ended: Swift.Bool
  @_spi(Core) public var readyState: THEOplayerSDK.ReadyState
  @_spi(Core) public var buffered: [THEOplayerSDK.TimeRange]?
  @_spi(Core) public var played: [THEOplayerSDK.TimeRange]?
  @_spi(Core) public var seekable: [THEOplayerSDK.TimeRange]?
  @_spi(Core) public var videoHeight: Swift.Int?
  @_spi(Core) public var videoWidth: Swift.Int?
  @_spi(Core) public var abr: any THEOplayerSDK.ABRConfiguration
  @_spi(Core) public var textTrackStyle: (any THEOplayerSDK.TextTrackStyle)?
  @_spi(Core) public init()
  @_spi(Core) public func play()
  @_spi(Core) public func pause()
  @_spi(Core) public func stop()
  @_spi(Core) public func setSource(_ newValue: THEOplayerSDK.SourceDescription?)
  @_spi(Core) public func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) public func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_spi(Core) public func resetContentPlayerState()
  @_spi(Core) public func reset()
  @_spi(Core) public func destroy()
  @_spi(Core) public func addIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) public func removeIntegration(integration: any THEOplayerSDK.Integration)
  @_spi(Core) public func startAirplay()
  @_spi(Core) public func stopAirplay()
  @_spi(Core) public func isAirplaySupported() -> Swift.Bool
  @_spi(Core) public func enterBackground(continuePlayback: Swift.Bool)
  @_spi(Core) public func exitBackground()
  @_spi(Core) public typealias ID = Foundation.UUID
  @_spi(Core) @objc deinit
}
public struct TextTrackListEventTypes {
  public static var ADD_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.AddTrackEvent>
  public static var REMOVE_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.RemoveTrackEvent>
  public static var CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.TrackChangeEvent>
}
public protocol BackgroundPlaybackDelegate : AnyObject {
  func shouldContinueAudioPlaybackInBackground() -> Swift.Bool
}
@_spi(Core) extension Swift.String {
  @_spi(Core) public func toDouble() -> Swift.Double?
  @_spi(Core) public func toInt() -> Swift.Int?
  @_spi(Core) public func toISO8601Date() -> Foundation.Date?
  @_spi(Core) public func trimPrefix(_ prefix: Swift.String) -> Swift.String
}
@_spi(Core) extension Swift.Substring {
  @_spi(Core) public func dropLeading(character: Swift.Character) -> Swift.Substring
}
@_spi(Core) extension Swift.String {
  @_spi(Core) public var unicodeEscaped: Swift.String {
    @_spi(Core) get
  }
}
public protocol AirPlay : THEOplayerSDK.EventDispatcherProtocol {
  var casting: Swift.Bool { get }
  var state: THEOplayerSDK.PlayerCastState { get }
  func start()
  func stop()
}
@_spi(Core) public protocol DefaultIdentifiable : Swift.Identifiable {
  @_spi(Core) var id: Foundation.UUID { get }
}
@objc @_hasMissingDesignatedInitializers public class CacheEvent : ObjectiveC.NSObject, THEOplayerSDK.EventProtocol {
  final public let type: Swift.String
  final public let date: Foundation.Date
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CacheStateChangeEvent : THEOplayerSDK.CacheEvent {
  @objc deinit
}
extension THEOplayerSDK.THEOplayer {
  public func addIntegration(_ integration: any THEOplayerSDK.Integration)
  public func removeIntegration(_ integration: any THEOplayerSDK.Integration)
  public func removeAllIntegrations()
  public func getAllIntegrations() -> [any THEOplayerSDK.Integration]
  public func getIntegrationByKind(_ kind: THEOplayerSDK.IntegrationKind) -> (any THEOplayerSDK.Integration)?
}
@_spi(Core) @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CastImplNative : THEOplayerSDK.DefaultEventDispatcher, THEOplayerSDK.Cast {
  @_spi(Core) public var chromecast: (any THEOplayerSDK.Chromecast)? {
    @_spi(Core) get
  }
  @_spi(Core) public var airPlay: (any THEOplayerSDK.AirPlay)? {
    @_spi(Core) get
  }
  @_spi(Core) public var casting: Swift.Bool {
    @_spi(Core) get
  }
  @_spi(Core) public var googleCastIntegration: (any THEOplayerSDK.Integration)? {
    @_spi(Core) get
  }
  @_spi(Core) @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "All DRM pre-integrations are deprecated and will be removed in later versions. Please use the custom integration approach instead. For more info, check the guide and sample app at: https://github.com/THEOplayer/samples-ios-sdk/tree/master/DRM-Playback")
public class XstreamDRMConfiguration : THEOplayerSDK.MultiplatformDRMConfiguration {
  public var ticketAcquisitionURL: Swift.String
  public var sessionId: Swift.String?
  public var streamId: Swift.String
  public init(ticketAcquisitionURL: Swift.String, streamId: Swift.String, sessionId: Swift.String? = nil, keySystemConfigurations: THEOplayerSDK.KeySystemConfigurationCollection)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct AirPlayEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.AirPlayStateChangeEvent>
}
public func serializeObjectToJSON<T>(object: T, dateEncodingStrategy: Foundation.JSONEncoder.DateEncodingStrategy? = nil) -> Swift.String where T : Swift.Encodable
@_spi(Core) @objc public protocol AppStateListener {
  @_spi(Core) @objc optional func appWillTerminate()
  @_spi(Core) @objc optional func appWillEnterForeground()
  @_spi(Core) @objc optional func appDidEnterBackground()
  @_spi(Core) @objc optional func appWillResignActive()
}
@_spi(Core) @_hasMissingDesignatedInitializers final public class AppStateManager {
  @_spi(Core) public enum AppState {
    @_spi(Core) case appWillResignActive
    @_spi(Core) case appWillEnterForeground
    @_spi(Core) case appDidEnterBackground
    @_spi(Core) case appWillTerminate
    @_spi(Core) public static func == (a: THEOplayerSDK.AppStateManager.AppState, b: THEOplayerSDK.AppStateManager.AppState) -> Swift.Bool
    @_spi(Core) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Core) public var hashValue: Swift.Int {
      @_spi(Core) get
    }
  }
  @_spi(Core) public static let sharedInstance: THEOplayerSDK.AppStateManager
  @_spi(Core) final public var appState: THEOplayerSDK.AppStateManager.AppState? {
    get
  }
  @_spi(Core) final public func addAppStateListener(_ listener: any THEOplayerSDK.AppStateListener)
  @_spi(Core) final public func removeAppStateListener(_ listener: any THEOplayerSDK.AppStateListener)
  @_spi(Core) @objc deinit
}
extension THEOplayerSDK.ChromecastMetadataType : Swift.Equatable {}
extension THEOplayerSDK.ChromecastMetadataType : Swift.Hashable {}
extension THEOplayerSDK.ChromecastMetadataType : Swift.RawRepresentable {}
extension THEOplayerSDK.ErrorCategory : Swift.Equatable {}
extension THEOplayerSDK.ErrorCategory : Swift.Hashable {}
extension THEOplayerSDK.ErrorCategory : Swift.RawRepresentable {}
extension THEOplayerSDK.ErrorCode : Swift.Equatable {}
extension THEOplayerSDK.ErrorCode : Swift.Hashable {}
extension THEOplayerSDK.ErrorCode : Swift.RawRepresentable {}
extension THEOplayerSDK.ReadyState : Swift.Equatable {}
extension THEOplayerSDK.ReadyState : Swift.Hashable {}
extension THEOplayerSDK.ReadyState : Swift.RawRepresentable {}
extension THEOplayerSDK.LicenseType : Swift.Equatable {}
extension THEOplayerSDK.LicenseType : Swift.Hashable {}
extension THEOplayerSDK.LicenseType : Swift.RawRepresentable {}
extension THEOplayerSDK.DRMIntegration : Swift.Equatable {}
extension THEOplayerSDK.DRMIntegration : Swift.Hashable {}
extension THEOplayerSDK.DRMIntegration : Swift.RawRepresentable {}
extension THEOplayerSDK.IntegrationError : Swift.Equatable {}
extension THEOplayerSDK.IntegrationError : Swift.Hashable {}
extension THEOplayerSDK.IntegrationKind : Swift.Equatable {}
extension THEOplayerSDK.IntegrationKind : Swift.Hashable {}
extension THEOplayerSDK.IntegrationKind : Swift.RawRepresentable {}
extension THEOplayerSDK.Preload : Swift.Equatable {}
extension THEOplayerSDK.Preload : Swift.Hashable {}
extension THEOplayerSDK.Preload : Swift.RawRepresentable {}
extension THEOplayerSDK.KeySystemId : Swift.Equatable {}
extension THEOplayerSDK.KeySystemId : Swift.Hashable {}
extension THEOplayerSDK.KeySystemId : Swift.RawRepresentable {}
extension THEOplayerSDK.AspectRatio : Swift.Equatable {}
extension THEOplayerSDK.AspectRatio : Swift.Hashable {}
extension THEOplayerSDK.AspectRatio : Swift.RawRepresentable {}
extension THEOplayerSDK.AdIntegration : Swift.Equatable {}
extension THEOplayerSDK.AdIntegration : Swift.Hashable {}
extension THEOplayerSDK.AdIntegration : Swift.RawRepresentable {}
extension THEOplayerSDK.SourceType : Swift.Equatable {}
extension THEOplayerSDK.SourceType : Swift.Hashable {}
extension THEOplayerSDK.SourceType : Swift.RawRepresentable {}
extension THEOplayerSDK.THEOAdDescription.LayoutOverride : Swift.Equatable {}
extension THEOplayerSDK.THEOAdDescription.LayoutOverride : Swift.Hashable {}
@_spi(Core) extension THEOplayerSDK.EventSource : THEOplayerSDK.EventSourceDelegate {}
extension THEOplayerSDK.TextTrackMode : Swift.Equatable {}
extension THEOplayerSDK.TextTrackMode : Swift.Hashable {}
extension THEOplayerSDK.TextTrackMode : Swift.RawRepresentable {}
extension THEOplayerSDK.PresentationMode : Swift.Equatable {}
extension THEOplayerSDK.PresentationMode : Swift.Hashable {}
extension THEOplayerSDK.PresentationMode : Swift.RawRepresentable {}
extension THEOplayerSDK.CacheStatus : Swift.Equatable {}
extension THEOplayerSDK.CacheStatus : Swift.Hashable {}
extension THEOplayerSDK.CacheStatus : Swift.RawRepresentable {}
extension THEOplayerSDK.CachingTaskStatus : Swift.Equatable {}
extension THEOplayerSDK.CachingTaskStatus : Swift.Hashable {}
extension THEOplayerSDK.CachingTaskStatus : Swift.RawRepresentable {}
extension THEOplayerSDK.CacheStatusIdleReason : Swift.Equatable {}
extension THEOplayerSDK.CacheStatusIdleReason : Swift.Hashable {}
extension THEOplayerSDK.CacheStatusIdleReason : Swift.RawRepresentable {}
@_spi(Core) extension THEOplayerSDK.AudioTrackKind : Swift.Equatable {}
@_spi(Core) extension THEOplayerSDK.AudioTrackKind : Swift.Hashable {}
@_spi(Core) extension THEOplayerSDK.AudioTrackKind : Swift.RawRepresentable {}
extension THEOplayerSDK.THEOErrorCode : Swift.Equatable {}
extension THEOplayerSDK.THEOErrorCode : Swift.Hashable {}
extension THEOplayerSDK.THEOErrorCode : Swift.RawRepresentable {}
extension THEOplayerSDK.TextTrackKind : Swift.Equatable {}
extension THEOplayerSDK.TextTrackKind : Swift.Hashable {}
extension THEOplayerSDK.TextTrackKind : Swift.RawRepresentable {}
extension THEOplayerSDK.TextTrackFormat : Swift.Equatable {}
extension THEOplayerSDK.TextTrackFormat : Swift.Hashable {}
extension THEOplayerSDK.TextTrackFormat : Swift.RawRepresentable {}
extension THEOplayerSDK.CrossOrigin : Swift.Equatable {}
extension THEOplayerSDK.CrossOrigin : Swift.Hashable {}
extension THEOplayerSDK.CrossOrigin : Swift.RawRepresentable {}
extension THEOplayerSDK.SSAIIntegrationId : Swift.Equatable {}
extension THEOplayerSDK.SSAIIntegrationId : Swift.Hashable {}
extension THEOplayerSDK.SSAIIntegrationId : Swift.RawRepresentable {}
extension THEOplayerSDK.StreamType : Swift.Equatable {}
extension THEOplayerSDK.StreamType : Swift.Hashable {}
extension THEOplayerSDK.StreamType : Swift.RawRepresentable {}
extension THEOplayerSDK.DateRangeCustomAttributesError : Swift.Equatable {}
extension THEOplayerSDK.DateRangeCustomAttributesError : Swift.Hashable {}
extension THEOplayerSDK.DateRangeCustomAttributesError : Swift.RawRepresentable {}
@_spi(Core) extension THEOplayerSDK.NetworkConnectionState : Swift.Equatable {}
@_spi(Core) extension THEOplayerSDK.NetworkConnectionState : Swift.Hashable {}
@_spi(Core) extension THEOplayerSDK.NetworkConnectionState : Swift.RawRepresentable {}
extension THEOplayerSDK.AdIntegrationKind : Swift.Equatable {}
extension THEOplayerSDK.AdIntegrationKind : Swift.Hashable {}
extension THEOplayerSDK.AdIntegrationKind : Swift.RawRepresentable {}
extension THEOplayerSDK.ABRStrategyType : Swift.Equatable {}
extension THEOplayerSDK.ABRStrategyType : Swift.Hashable {}
extension THEOplayerSDK.ABRStrategyType : Swift.RawRepresentable {}
extension THEOplayerSDK.PlayerCastState : Swift.Equatable {}
extension THEOplayerSDK.PlayerCastState : Swift.Hashable {}
extension THEOplayerSDK.PlayerCastState : Swift.RawRepresentable {}
extension THEOplayerSDK.PictureInPictureCorner : Swift.Equatable {}
extension THEOplayerSDK.PictureInPictureCorner : Swift.Hashable {}
extension THEOplayerSDK.PictureInPictureCorner : Swift.RawRepresentable {}
extension THEOplayerSDK.CastStrategy : Swift.Equatable {}
extension THEOplayerSDK.CastStrategy : Swift.Hashable {}
extension THEOplayerSDK.CastStrategy : Swift.RawRepresentable {}
extension THEOplayerSDK.OmidFriendlyObstructionPurpose : Swift.Equatable {}
extension THEOplayerSDK.OmidFriendlyObstructionPurpose : Swift.Hashable {}
extension THEOplayerSDK.OmidFriendlyObstructionPurpose : Swift.RawRepresentable {}
@_spi(Core) extension THEOplayerSDK.PlayerViewLayout : Swift.Equatable {}
@_spi(Core) extension THEOplayerSDK.PlayerViewLayout : Swift.Hashable {}
@_spi(Core) extension THEOplayerSDK.TextTrackType : Swift.Equatable {}
@_spi(Core) extension THEOplayerSDK.TextTrackType : Swift.Hashable {}
@_spi(Core) extension THEOplayerSDK.TextTrackType : Swift.RawRepresentable {}
@_spi(Core) extension THEOplayerSDK.AppStateManager.AppState : Swift.Equatable {}
@_spi(Core) extension THEOplayerSDK.AppStateManager.AppState : Swift.Hashable {}
